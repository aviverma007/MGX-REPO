{"ast":null,"code":"// Frontend-only API using dataService\nimport dataService from './dataService';\nimport imageStorage from './imageStorage';\n\n// Employee API endpoints\nexport const employeeAPI = {\n  // Get all employees with optional search and filters\n  getAll: async (searchParams = {}) => {\n    const employees = await dataService.getEmployees(searchParams);\n\n    // Load stored images for all employees\n    const allImages = await imageStorage.getAllImages();\n\n    // Add stored images to employee data\n    return employees.map(emp => ({\n      ...emp,\n      profileImage: allImages[emp.id] || emp.profileImage\n    }));\n  },\n  // Update employee profile image\n  updateImage: async (employeeId, imageData) => {\n    // If it's base64 data, save to storage\n    if (typeof imageData === 'string' && imageData.startsWith('data:image/')) {\n      // Create a mock file object from base64 for storage\n      const response = await fetch(imageData);\n      const blob = await response.blob();\n      const file = new File([blob], `profile_${employeeId}.jpg`, {\n        type: blob.type\n      });\n      const savedUrl = await imageStorage.saveImage(employeeId, file);\n\n      // Update in dataService as well\n      const updatedEmployee = await dataService.updateEmployeeImage(employeeId, savedUrl);\n      return {\n        ...updatedEmployee,\n        profileImage: savedUrl\n      };\n    }\n    return await dataService.updateEmployeeImage(employeeId, imageData);\n  },\n  // Upload employee profile image file (original images)\n  uploadImage: async (employeeId, imageFile) => {\n    // Save the actual file to local storage\n    const savedUrl = await imageStorage.saveImage(employeeId, imageFile);\n\n    // Also update in dataService\n    const updatedEmployee = await dataService.updateEmployeeImage(employeeId, savedUrl);\n    return {\n      ...updatedEmployee,\n      profileImage: savedUrl\n    };\n  }\n};\n\n// Hierarchy API endpoints\nexport const hierarchyAPI = {\n  // Get all hierarchy relationships\n  getAll: async () => {\n    return await dataService.getHierarchy();\n  },\n  // Add new hierarchy relationship\n  create: async relationshipData => {\n    return await dataService.createHierarchy(relationshipData);\n  },\n  // Remove hierarchy relationship\n  remove: async employeeId => {\n    return await dataService.deleteHierarchy(employeeId);\n  },\n  // Clear all hierarchy relationships\n  clearAll: async () => {\n    return await dataService.clearAllHierarchy();\n  }\n};\n\n// Utility API endpoints\nexport const utilityAPI = {\n  // Refresh Excel data (now just reloads from frontend)\n  refreshExcel: async () => {\n    const stats = await dataService.loadAllData();\n    return {\n      message: 'Excel data refreshed successfully',\n      count: stats.employees\n    };\n  },\n  // Get departments\n  getDepartments: async () => {\n    return await dataService.getDepartments();\n  },\n  // Get locations  \n  getLocations: async () => {\n    return await dataService.getLocations();\n  },\n  // Get system statistics\n  getStats: async () => {\n    return await dataService.getStats();\n  }\n};\n\n// News API endpoints\nexport const newsAPI = {\n  getAll: async () => {\n    return await dataService.getNews();\n  },\n  create: async newsData => {\n    return await dataService.createNews(newsData);\n  },\n  update: async (id, newsData) => {\n    return await dataService.updateNews(id, newsData);\n  },\n  delete: async id => {\n    return await dataService.deleteNews(id);\n  }\n};\n\n// Task API endpoints\nexport const taskAPI = {\n  getAll: async () => {\n    return await dataService.getTasks();\n  },\n  create: async taskData => {\n    return await dataService.createTask(taskData);\n  },\n  update: async (id, taskData) => {\n    return await dataService.updateTask(id, taskData);\n  },\n  delete: async id => {\n    return await dataService.deleteTask(id);\n  }\n};\n\n// Knowledge API endpoints\nexport const knowledgeAPI = {\n  getAll: async () => {\n    return await dataService.getKnowledge();\n  },\n  create: async knowledgeData => {\n    return await dataService.createKnowledge(knowledgeData);\n  },\n  update: async (id, knowledgeData) => {\n    return await dataService.updateKnowledge(id, knowledgeData);\n  },\n  delete: async id => {\n    return await dataService.deleteKnowledge(id);\n  }\n};\n\n// Help API endpoints\nexport const helpAPI = {\n  getAll: async () => {\n    return await dataService.getHelp();\n  },\n  create: async helpData => {\n    return await dataService.createHelp(helpData);\n  },\n  update: async (id, helpData) => {\n    return await dataService.updateHelp(id, helpData);\n  },\n  addReply: async (id, replyData) => {\n    return await dataService.addHelpReply(id, replyData);\n  },\n  delete: async id => {\n    return await dataService.deleteHelp(id);\n  }\n};\n\n// Meeting Rooms API endpoints\nexport const meetingRoomAPI = {\n  getAll: async (filters = {}) => {\n    return await dataService.getMeetingRooms(filters);\n  },\n  getLocations: async () => {\n    return await dataService.getLocations();\n  },\n  getFloors: async () => {\n    // Extract floors from meeting rooms data\n    const rooms = await dataService.getMeetingRooms();\n    const floors = [...new Set(rooms.map(room => room.floor))];\n    return floors;\n  },\n  book: async (roomId, bookingData) => {\n    return await dataService.bookMeetingRoom(roomId, bookingData);\n  },\n  cancelBooking: async (roomId, bookingId = null) => {\n    return await dataService.cancelMeetingRoomBooking(roomId, bookingId);\n  },\n  clearAllBookings: async () => {\n    return await dataService.clearAllMeetingRoomBookings();\n  }\n};\n\n// Attendance API endpoints\nexport const attendanceAPI = {\n  getAll: async (searchParams = {}) => {\n    return await dataService.getAttendance(searchParams);\n  },\n  create: async attendanceData => {\n    return await dataService.createAttendance(attendanceData);\n  },\n  update: async (id, attendanceData) => {\n    // For frontend-only, we'll just update the existing record\n    const attendance = dataService.attendance.find(a => a.id === id);\n    if (attendance) {\n      Object.assign(attendance, attendanceData, {\n        updated_at: new Date().toISOString()\n      });\n      return attendance;\n    }\n    throw new Error('Attendance record not found');\n  }\n};\n\n// Policies API endpoints\nexport const policyAPI = {\n  getAll: async () => {\n    return await dataService.getPolicies();\n  },\n  create: async policyData => {\n    return await dataService.createPolicy(policyData);\n  },\n  update: async (id, policyData) => {\n    const index = dataService.policies.findIndex(p => p.id === id);\n    if (index > -1) {\n      dataService.policies[index] = {\n        ...dataService.policies[index],\n        ...policyData,\n        updated_at: new Date().toISOString()\n      };\n      return dataService.policies[index];\n    }\n    throw new Error('Policy not found');\n  },\n  delete: async id => {\n    const index = dataService.policies.findIndex(p => p.id === id);\n    if (index > -1) {\n      dataService.policies.splice(index, 1);\n      return {\n        message: 'Policy deleted'\n      };\n    }\n    throw new Error('Policy not found');\n  }\n};\n\n// Workflows API endpoints\nexport const workflowAPI = {\n  getAll: async () => {\n    return await dataService.getWorkflows();\n  },\n  create: async workflowData => {\n    return await dataService.createWorkflow(workflowData);\n  },\n  update: async (id, workflowData) => {\n    const index = dataService.workflows.findIndex(w => w.id === id);\n    if (index > -1) {\n      dataService.workflows[index] = {\n        ...dataService.workflows[index],\n        ...workflowData,\n        updated_at: new Date().toISOString()\n      };\n      return dataService.workflows[index];\n    }\n    throw new Error('Workflow not found');\n  }\n};\n\n// Chat API endpoints (simplified for frontend-only)\nexport const chatAPI = {\n  getHistory: async sessionId => {\n    // Return empty history for frontend-only mode\n    return [];\n  },\n  send: async (message, sessionId) => {\n    // Return a mock response for frontend-only mode\n    return {\n      response: \"I'm sorry, the AI chat feature is currently unavailable in offline mode. Please use other features of the application.\",\n      sessionId: sessionId\n    };\n  },\n  clearHistory: async sessionId => {\n    // No-op for frontend-only mode\n    return {\n      message: 'Chat history cleared'\n    };\n  }\n};","map":{"version":3,"names":["dataService","imageStorage","employeeAPI","getAll","searchParams","employees","getEmployees","allImages","getAllImages","map","emp","profileImage","id","updateImage","employeeId","imageData","startsWith","response","fetch","blob","file","File","type","savedUrl","saveImage","updatedEmployee","updateEmployeeImage","uploadImage","imageFile","hierarchyAPI","getHierarchy","create","relationshipData","createHierarchy","remove","deleteHierarchy","clearAll","clearAllHierarchy","utilityAPI","refreshExcel","stats","loadAllData","message","count","getDepartments","getLocations","getStats","newsAPI","getNews","newsData","createNews","update","updateNews","delete","deleteNews","taskAPI","getTasks","taskData","createTask","updateTask","deleteTask","knowledgeAPI","getKnowledge","knowledgeData","createKnowledge","updateKnowledge","deleteKnowledge","helpAPI","getHelp","helpData","createHelp","updateHelp","addReply","replyData","addHelpReply","deleteHelp","meetingRoomAPI","filters","getMeetingRooms","getFloors","rooms","floors","Set","room","floor","book","roomId","bookingData","bookMeetingRoom","cancelBooking","bookingId","cancelMeetingRoomBooking","clearAllBookings","clearAllMeetingRoomBookings","attendanceAPI","getAttendance","attendanceData","createAttendance","attendance","find","a","Object","assign","updated_at","Date","toISOString","Error","policyAPI","getPolicies","policyData","createPolicy","index","policies","findIndex","p","splice","workflowAPI","getWorkflows","workflowData","createWorkflow","workflows","w","chatAPI","getHistory","sessionId","send","clearHistory"],"sources":["D:/SMARTDESK APPLICATION FILES/EMPLOYEE_DIR_BETA1/frontend/src/services/api.js"],"sourcesContent":["// Frontend-only API using dataService\r\nimport dataService from './dataService';\r\nimport imageStorage from './imageStorage';\r\n\r\n// Employee API endpoints\r\nexport const employeeAPI = {\r\n  // Get all employees with optional search and filters\r\n  getAll: async (searchParams = {}) => {\r\n    const employees = await dataService.getEmployees(searchParams);\r\n    \r\n    // Load stored images for all employees\r\n    const allImages = await imageStorage.getAllImages();\r\n    \r\n    // Add stored images to employee data\r\n    return employees.map(emp => ({\r\n      ...emp,\r\n      profileImage: allImages[emp.id] || emp.profileImage\r\n    }));\r\n  },\r\n\r\n  // Update employee profile image\r\n  updateImage: async (employeeId, imageData) => {\r\n    // If it's base64 data, save to storage\r\n    if (typeof imageData === 'string' && imageData.startsWith('data:image/')) {\r\n      // Create a mock file object from base64 for storage\r\n      const response = await fetch(imageData);\r\n      const blob = await response.blob();\r\n      const file = new File([blob], `profile_${employeeId}.jpg`, { type: blob.type });\r\n      \r\n      const savedUrl = await imageStorage.saveImage(employeeId, file);\r\n      \r\n      // Update in dataService as well\r\n      const updatedEmployee = await dataService.updateEmployeeImage(employeeId, savedUrl);\r\n      return { ...updatedEmployee, profileImage: savedUrl };\r\n    }\r\n    \r\n    return await dataService.updateEmployeeImage(employeeId, imageData);\r\n  },\r\n\r\n  // Upload employee profile image file (original images)\r\n  uploadImage: async (employeeId, imageFile) => {\r\n    // Save the actual file to local storage\r\n    const savedUrl = await imageStorage.saveImage(employeeId, imageFile);\r\n    \r\n    // Also update in dataService\r\n    const updatedEmployee = await dataService.updateEmployeeImage(employeeId, savedUrl);\r\n    \r\n    return { ...updatedEmployee, profileImage: savedUrl };\r\n  }\r\n};\r\n\r\n// Hierarchy API endpoints\r\nexport const hierarchyAPI = {\r\n  // Get all hierarchy relationships\r\n  getAll: async () => {\r\n    return await dataService.getHierarchy();\r\n  },\r\n\r\n  // Add new hierarchy relationship\r\n  create: async (relationshipData) => {\r\n    return await dataService.createHierarchy(relationshipData);\r\n  },\r\n\r\n  // Remove hierarchy relationship\r\n  remove: async (employeeId) => {\r\n    return await dataService.deleteHierarchy(employeeId);\r\n  },\r\n\r\n  // Clear all hierarchy relationships\r\n  clearAll: async () => {\r\n    return await dataService.clearAllHierarchy();\r\n  }\r\n};\r\n\r\n// Utility API endpoints\r\nexport const utilityAPI = {\r\n  // Refresh Excel data (now just reloads from frontend)\r\n  refreshExcel: async () => {\r\n    const stats = await dataService.loadAllData();\r\n    return { \r\n      message: 'Excel data refreshed successfully',\r\n      count: stats.employees\r\n    };\r\n  },\r\n\r\n  // Get departments\r\n  getDepartments: async () => {\r\n    return await dataService.getDepartments();\r\n  },\r\n\r\n  // Get locations  \r\n  getLocations: async () => {\r\n    return await dataService.getLocations();\r\n  },\r\n\r\n  // Get system statistics\r\n  getStats: async () => {\r\n    return await dataService.getStats();\r\n  }\r\n};\r\n\r\n// News API endpoints\r\nexport const newsAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getNews();\r\n  },\r\n\r\n  create: async (newsData) => {\r\n    return await dataService.createNews(newsData);\r\n  },\r\n\r\n  update: async (id, newsData) => {\r\n    return await dataService.updateNews(id, newsData);\r\n  },\r\n\r\n  delete: async (id) => {\r\n    return await dataService.deleteNews(id);\r\n  }\r\n};\r\n\r\n// Task API endpoints\r\nexport const taskAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getTasks();\r\n  },\r\n\r\n  create: async (taskData) => {\r\n    return await dataService.createTask(taskData);\r\n  },\r\n\r\n  update: async (id, taskData) => {\r\n    return await dataService.updateTask(id, taskData);\r\n  },\r\n\r\n  delete: async (id) => {\r\n    return await dataService.deleteTask(id);\r\n  }\r\n};\r\n\r\n// Knowledge API endpoints\r\nexport const knowledgeAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getKnowledge();\r\n  },\r\n\r\n  create: async (knowledgeData) => {\r\n    return await dataService.createKnowledge(knowledgeData);\r\n  },\r\n\r\n  update: async (id, knowledgeData) => {\r\n    return await dataService.updateKnowledge(id, knowledgeData);\r\n  },\r\n\r\n  delete: async (id) => {\r\n    return await dataService.deleteKnowledge(id);\r\n  }\r\n};\r\n\r\n// Help API endpoints\r\nexport const helpAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getHelp();\r\n  },\r\n\r\n  create: async (helpData) => {\r\n    return await dataService.createHelp(helpData);\r\n  },\r\n\r\n  update: async (id, helpData) => {\r\n    return await dataService.updateHelp(id, helpData);\r\n  },\r\n\r\n  addReply: async (id, replyData) => {\r\n    return await dataService.addHelpReply(id, replyData);\r\n  },\r\n\r\n  delete: async (id) => {\r\n    return await dataService.deleteHelp(id);\r\n  }\r\n};\r\n\r\n// Meeting Rooms API endpoints\r\nexport const meetingRoomAPI = {\r\n  getAll: async (filters = {}) => {\r\n    return await dataService.getMeetingRooms(filters);\r\n  },\r\n\r\n  getLocations: async () => {\r\n    return await dataService.getLocations();\r\n  },\r\n\r\n  getFloors: async () => {\r\n    // Extract floors from meeting rooms data\r\n    const rooms = await dataService.getMeetingRooms();\r\n    const floors = [...new Set(rooms.map(room => room.floor))];\r\n    return floors;\r\n  },\r\n\r\n  book: async (roomId, bookingData) => {\r\n    return await dataService.bookMeetingRoom(roomId, bookingData);\r\n  },\r\n\r\n  cancelBooking: async (roomId, bookingId = null) => {\r\n    return await dataService.cancelMeetingRoomBooking(roomId, bookingId);\r\n  },\r\n\r\n  clearAllBookings: async () => {\r\n    return await dataService.clearAllMeetingRoomBookings();\r\n  }\r\n};\r\n\r\n// Attendance API endpoints\r\nexport const attendanceAPI = {\r\n  getAll: async (searchParams = {}) => {\r\n    return await dataService.getAttendance(searchParams);\r\n  },\r\n\r\n  create: async (attendanceData) => {\r\n    return await dataService.createAttendance(attendanceData);\r\n  },\r\n\r\n  update: async (id, attendanceData) => {\r\n    // For frontend-only, we'll just update the existing record\r\n    const attendance = dataService.attendance.find(a => a.id === id);\r\n    if (attendance) {\r\n      Object.assign(attendance, attendanceData, { updated_at: new Date().toISOString() });\r\n      return attendance;\r\n    }\r\n    throw new Error('Attendance record not found');\r\n  }\r\n};\r\n\r\n// Policies API endpoints\r\nexport const policyAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getPolicies();\r\n  },\r\n\r\n  create: async (policyData) => {\r\n    return await dataService.createPolicy(policyData);\r\n  },\r\n\r\n  update: async (id, policyData) => {\r\n    const index = dataService.policies.findIndex(p => p.id === id);\r\n    if (index > -1) {\r\n      dataService.policies[index] = {\r\n        ...dataService.policies[index],\r\n        ...policyData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return dataService.policies[index];\r\n    }\r\n    throw new Error('Policy not found');\r\n  },\r\n\r\n  delete: async (id) => {\r\n    const index = dataService.policies.findIndex(p => p.id === id);\r\n    if (index > -1) {\r\n      dataService.policies.splice(index, 1);\r\n      return { message: 'Policy deleted' };\r\n    }\r\n    throw new Error('Policy not found');\r\n  }\r\n};\r\n\r\n// Workflows API endpoints\r\nexport const workflowAPI = {\r\n  getAll: async () => {\r\n    return await dataService.getWorkflows();\r\n  },\r\n\r\n  create: async (workflowData) => {\r\n    return await dataService.createWorkflow(workflowData);\r\n  },\r\n\r\n  update: async (id, workflowData) => {\r\n    const index = dataService.workflows.findIndex(w => w.id === id);\r\n    if (index > -1) {\r\n      dataService.workflows[index] = {\r\n        ...dataService.workflows[index],\r\n        ...workflowData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return dataService.workflows[index];\r\n    }\r\n    throw new Error('Workflow not found');\r\n  }\r\n};\r\n\r\n// Chat API endpoints (simplified for frontend-only)\r\nexport const chatAPI = {\r\n  getHistory: async (sessionId) => {\r\n    // Return empty history for frontend-only mode\r\n    return [];\r\n  },\r\n\r\n  send: async (message, sessionId) => {\r\n    // Return a mock response for frontend-only mode\r\n    return {\r\n      response: \"I'm sorry, the AI chat feature is currently unavailable in offline mode. Please use other features of the application.\",\r\n      sessionId: sessionId\r\n    };\r\n  },\r\n\r\n  clearHistory: async (sessionId) => {\r\n    // No-op for frontend-only mode\r\n    return { message: 'Chat history cleared' };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}