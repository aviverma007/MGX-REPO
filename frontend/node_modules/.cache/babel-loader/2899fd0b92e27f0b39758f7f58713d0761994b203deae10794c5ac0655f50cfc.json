{"ast":null,"code":"// Image Storage Service - Frontend Implementation\n// This handles image persistence using localStorage and IndexedDB\n\nclass ImageStorageService {\n  constructor() {\n    this.dbName = 'EmployeeImageDB';\n    this.storeName = 'images';\n    this.version = 1;\n    this.db = null;\n    this.initDB();\n  }\n\n  // Initialize IndexedDB for larger image storage\n  async initDB() {\n    try {\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(this.dbName, this.version);\n        request.onerror = () => reject(request.error);\n        request.onsuccess = () => {\n          this.db = request.result;\n          resolve(this.db);\n        };\n        request.onupgradeneeded = event => {\n          const db = event.target.result;\n          if (!db.objectStoreNames.contains(this.storeName)) {\n            const store = db.createObjectStore(this.storeName, {\n              keyPath: 'employeeId'\n            });\n            store.createIndex('employeeId', 'employeeId', {\n              unique: true\n            });\n          }\n        };\n      });\n    } catch (error) {\n      console.error('Failed to initialize IndexedDB:', error);\n      // Fallback to localStorage\n    }\n  }\n\n  // Save image to storage\n  async saveImage(employeeId, imageFile) {\n    try {\n      // Convert file to base64 for storage\n      const base64 = await this.fileToBase64(imageFile);\n      const imageData = {\n        employeeId: employeeId,\n        base64: base64,\n        fileName: imageFile.name,\n        fileType: imageFile.type,\n        fileSize: imageFile.size,\n        timestamp: new Date().toISOString(),\n        url: base64 // For immediate use\n      };\n\n      // Try IndexedDB first\n      if (this.db) {\n        await this.saveToIndexedDB(imageData);\n      } else {\n        // Fallback to localStorage\n        this.saveToLocalStorage(employeeId, imageData);\n      }\n\n      // Also save to localStorage for quick access\n      this.saveImageUrlToLocalStorage(employeeId, base64);\n      return base64;\n    } catch (error) {\n      console.error('Error saving image:', error);\n      throw error;\n    }\n  }\n\n  // Save to IndexedDB\n  async saveToIndexedDB(imageData) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.put(imageData);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Save to localStorage (for smaller images or fallback)\n  saveToLocalStorage(employeeId, imageData) {\n    try {\n      // Compress data if it's too large for localStorage\n      const compressedData = {\n        employeeId: imageData.employeeId,\n        url: imageData.base64,\n        timestamp: imageData.timestamp\n      };\n      localStorage.setItem(`employee_image_${employeeId}`, JSON.stringify(compressedData));\n    } catch (error) {\n      console.error('LocalStorage save failed:', error);\n    }\n  }\n\n  // Save just the image URL for quick access\n  saveImageUrlToLocalStorage(employeeId, imageUrl) {\n    try {\n      localStorage.setItem(`employee_image_url_${employeeId}`, imageUrl);\n    } catch (error) {\n      console.error('Error saving image URL to localStorage:', error);\n    }\n  }\n\n  // Get image from storage\n  async getImage(employeeId) {\n    try {\n      // First try IndexedDB\n      if (this.db) {\n        const imageData = await this.getFromIndexedDB(employeeId);\n        if (imageData) {\n          return imageData.url;\n        }\n      }\n\n      // Then try localStorage URL\n      const imageUrl = localStorage.getItem(`employee_image_url_${employeeId}`);\n      if (imageUrl) {\n        return imageUrl;\n      }\n\n      // Finally try full localStorage data\n      const storedData = localStorage.getItem(`employee_image_${employeeId}`);\n      if (storedData) {\n        const parsed = JSON.parse(storedData);\n        return parsed.url;\n      }\n      return null;\n    } catch (error) {\n      console.error('Error retrieving image:', error);\n      return null;\n    }\n  }\n\n  // Get from IndexedDB\n  async getFromIndexedDB(employeeId) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(employeeId);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Convert file to base64\n  fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  // Get all stored images (for bulk operations)\n  async getAllImages() {\n    try {\n      const images = {};\n      if (this.db) {\n        const allImages = await this.getAllFromIndexedDB();\n        allImages.forEach(img => {\n          images[img.employeeId] = img.url;\n        });\n      }\n\n      // Also get from localStorage\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('employee_image_url_')) {\n          const employeeId = key.replace('employee_image_url_', '');\n          if (!images[employeeId]) {\n            images[employeeId] = localStorage.getItem(key);\n          }\n        }\n      }\n      return images;\n    } catch (error) {\n      console.error('Error getting all images:', error);\n      return {};\n    }\n  }\n\n  // Get all from IndexedDB\n  async getAllFromIndexedDB() {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readonly');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result || []);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Delete image\n  async deleteImage(employeeId) {\n    try {\n      if (this.db) {\n        await this.deleteFromIndexedDB(employeeId);\n      }\n      localStorage.removeItem(`employee_image_${employeeId}`);\n      localStorage.removeItem(`employee_image_url_${employeeId}`);\n    } catch (error) {\n      console.error('Error deleting image:', error);\n    }\n  }\n\n  // Delete from IndexedDB\n  async deleteFromIndexedDB(employeeId) {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.delete(employeeId);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Clear all images\n  async clearAllImages() {\n    try {\n      if (this.db) {\n        await this.clearIndexedDB();\n      }\n\n      // Clear localStorage\n      const keysToRemove = [];\n      for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && (key.startsWith('employee_image_') || key.startsWith('employee_image_url_'))) {\n          keysToRemove.push(key);\n        }\n      }\n      keysToRemove.forEach(key => localStorage.removeItem(key));\n    } catch (error) {\n      console.error('Error clearing all images:', error);\n    }\n  }\n\n  // Clear IndexedDB\n  async clearIndexedDB() {\n    return new Promise((resolve, reject) => {\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\n      const store = transaction.objectStore(this.storeName);\n      const request = store.clear();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n\n// Create and export singleton instance\nconst imageStorage = new ImageStorageService();\nexport default imageStorage;","map":{"version":3,"names":["ImageStorageService","constructor","dbName","storeName","version","db","initDB","Promise","resolve","reject","request","indexedDB","open","onerror","error","onsuccess","result","onupgradeneeded","event","target","objectStoreNames","contains","store","createObjectStore","keyPath","createIndex","unique","console","saveImage","employeeId","imageFile","base64","fileToBase64","imageData","fileName","name","fileType","type","fileSize","size","timestamp","Date","toISOString","url","saveToIndexedDB","saveToLocalStorage","saveImageUrlToLocalStorage","transaction","objectStore","put","compressedData","localStorage","setItem","JSON","stringify","imageUrl","getImage","getFromIndexedDB","getItem","storedData","parsed","parse","get","file","reader","FileReader","readAsDataURL","onload","getAllImages","images","allImages","getAllFromIndexedDB","forEach","img","i","length","key","startsWith","replace","getAll","deleteImage","deleteFromIndexedDB","removeItem","delete","clearAllImages","clearIndexedDB","keysToRemove","push","clear","imageStorage"],"sources":["D:/SMARTDESK APPLICATION FILES/EMPLOYEE_DIR_BETA1/frontend/src/services/imageStorage.js"],"sourcesContent":["// Image Storage Service - Frontend Implementation\r\n// This handles image persistence using localStorage and IndexedDB\r\n\r\nclass ImageStorageService {\r\n  constructor() {\r\n    this.dbName = 'EmployeeImageDB';\r\n    this.storeName = 'images';\r\n    this.version = 1;\r\n    this.db = null;\r\n    this.initDB();\r\n  }\r\n\r\n  // Initialize IndexedDB for larger image storage\r\n  async initDB() {\r\n    try {\r\n      return new Promise((resolve, reject) => {\r\n        const request = indexedDB.open(this.dbName, this.version);\r\n        \r\n        request.onerror = () => reject(request.error);\r\n        request.onsuccess = () => {\r\n          this.db = request.result;\r\n          resolve(this.db);\r\n        };\r\n        \r\n        request.onupgradeneeded = (event) => {\r\n          const db = event.target.result;\r\n          if (!db.objectStoreNames.contains(this.storeName)) {\r\n            const store = db.createObjectStore(this.storeName, { keyPath: 'employeeId' });\r\n            store.createIndex('employeeId', 'employeeId', { unique: true });\r\n          }\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to initialize IndexedDB:', error);\r\n      // Fallback to localStorage\r\n    }\r\n  }\r\n\r\n  // Save image to storage\r\n  async saveImage(employeeId, imageFile) {\r\n    try {\r\n      // Convert file to base64 for storage\r\n      const base64 = await this.fileToBase64(imageFile);\r\n      \r\n      const imageData = {\r\n        employeeId: employeeId,\r\n        base64: base64,\r\n        fileName: imageFile.name,\r\n        fileType: imageFile.type,\r\n        fileSize: imageFile.size,\r\n        timestamp: new Date().toISOString(),\r\n        url: base64 // For immediate use\r\n      };\r\n\r\n      // Try IndexedDB first\r\n      if (this.db) {\r\n        await this.saveToIndexedDB(imageData);\r\n      } else {\r\n        // Fallback to localStorage\r\n        this.saveToLocalStorage(employeeId, imageData);\r\n      }\r\n\r\n      // Also save to localStorage for quick access\r\n      this.saveImageUrlToLocalStorage(employeeId, base64);\r\n      \r\n      return base64;\r\n    } catch (error) {\r\n      console.error('Error saving image:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Save to IndexedDB\r\n  async saveToIndexedDB(imageData) {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.put(imageData);\r\n      \r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // Save to localStorage (for smaller images or fallback)\r\n  saveToLocalStorage(employeeId, imageData) {\r\n    try {\r\n      // Compress data if it's too large for localStorage\r\n      const compressedData = {\r\n        employeeId: imageData.employeeId,\r\n        url: imageData.base64,\r\n        timestamp: imageData.timestamp\r\n      };\r\n      localStorage.setItem(`employee_image_${employeeId}`, JSON.stringify(compressedData));\r\n    } catch (error) {\r\n      console.error('LocalStorage save failed:', error);\r\n    }\r\n  }\r\n\r\n  // Save just the image URL for quick access\r\n  saveImageUrlToLocalStorage(employeeId, imageUrl) {\r\n    try {\r\n      localStorage.setItem(`employee_image_url_${employeeId}`, imageUrl);\r\n    } catch (error) {\r\n      console.error('Error saving image URL to localStorage:', error);\r\n    }\r\n  }\r\n\r\n  // Get image from storage\r\n  async getImage(employeeId) {\r\n    try {\r\n      // First try IndexedDB\r\n      if (this.db) {\r\n        const imageData = await this.getFromIndexedDB(employeeId);\r\n        if (imageData) {\r\n          return imageData.url;\r\n        }\r\n      }\r\n      \r\n      // Then try localStorage URL\r\n      const imageUrl = localStorage.getItem(`employee_image_url_${employeeId}`);\r\n      if (imageUrl) {\r\n        return imageUrl;\r\n      }\r\n\r\n      // Finally try full localStorage data\r\n      const storedData = localStorage.getItem(`employee_image_${employeeId}`);\r\n      if (storedData) {\r\n        const parsed = JSON.parse(storedData);\r\n        return parsed.url;\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error retrieving image:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Get from IndexedDB\r\n  async getFromIndexedDB(employeeId) {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction([this.storeName], 'readonly');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.get(employeeId);\r\n      \r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // Convert file to base64\r\n  fileToBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  }\r\n\r\n  // Get all stored images (for bulk operations)\r\n  async getAllImages() {\r\n    try {\r\n      const images = {};\r\n      \r\n      if (this.db) {\r\n        const allImages = await this.getAllFromIndexedDB();\r\n        allImages.forEach(img => {\r\n          images[img.employeeId] = img.url;\r\n        });\r\n      }\r\n\r\n      // Also get from localStorage\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && key.startsWith('employee_image_url_')) {\r\n          const employeeId = key.replace('employee_image_url_', '');\r\n          if (!images[employeeId]) {\r\n            images[employeeId] = localStorage.getItem(key);\r\n          }\r\n        }\r\n      }\r\n\r\n      return images;\r\n    } catch (error) {\r\n      console.error('Error getting all images:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // Get all from IndexedDB\r\n  async getAllFromIndexedDB() {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction([this.storeName], 'readonly');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => resolve(request.result || []);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // Delete image\r\n  async deleteImage(employeeId) {\r\n    try {\r\n      if (this.db) {\r\n        await this.deleteFromIndexedDB(employeeId);\r\n      }\r\n      localStorage.removeItem(`employee_image_${employeeId}`);\r\n      localStorage.removeItem(`employee_image_url_${employeeId}`);\r\n    } catch (error) {\r\n      console.error('Error deleting image:', error);\r\n    }\r\n  }\r\n\r\n  // Delete from IndexedDB\r\n  async deleteFromIndexedDB(employeeId) {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.delete(employeeId);\r\n      \r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n\r\n  // Clear all images\r\n  async clearAllImages() {\r\n    try {\r\n      if (this.db) {\r\n        await this.clearIndexedDB();\r\n      }\r\n      \r\n      // Clear localStorage\r\n      const keysToRemove = [];\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && (key.startsWith('employee_image_') || key.startsWith('employee_image_url_'))) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    } catch (error) {\r\n      console.error('Error clearing all images:', error);\r\n    }\r\n  }\r\n\r\n  // Clear IndexedDB\r\n  async clearIndexedDB() {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.db.transaction([this.storeName], 'readwrite');\r\n      const store = transaction.objectStore(this.storeName);\r\n      const request = store.clear();\r\n      \r\n      request.onsuccess = () => resolve(request.result);\r\n      request.onerror = () => reject(request.error);\r\n    });\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst imageStorage = new ImageStorageService();\r\nexport default imageStorage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}