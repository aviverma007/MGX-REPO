{"ast":null,"code":"import React,{useState,useMemo,useEffect}from\"react\";import{Users,Plus,Trash2,RotateCcw,Network,Table as TableIcon,Save,Shield,RefreshCw}from\"lucide-react\";import{Card,CardContent,CardHeader,CardTitle}from\"./ui/card\";import{Button}from\"./ui/button\";import{Badge}from\"./ui/badge\";import{employeeAPI,hierarchyAPI}from\"../services/api\";import HierarchyTree from\"./HierarchyTree\";import HierarchyTable from\"./HierarchyTable\";import SearchableSelect from\"./ui/searchable-select\";import{toast}from\"sonner\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HierarchyBuilder=()=>{const[hierarchyData,setHierarchyData]=useState([]);const[selectedEmployee,setSelectedEmployee]=useState(\"\");const[selectedManager,setSelectedManager]=useState(\"\");const[viewMode,setViewMode]=useState(\"tree\");const[employees,setEmployees]=useState([]);const[loading,setLoading]=useState(true);const[hasUnsavedChanges,setHasUnsavedChanges]=useState(false);const[isSaving,setIsSaving]=useState(false);// Load all employees and hierarchy data on component mount\nuseEffect(()=>{const loadData=async()=>{try{setLoading(true);const[employeeData,hierarchyDataFromAPI]=await Promise.all([employeeAPI.getAll(),hierarchyAPI.getAll()]);setEmployees(employeeData);setHierarchyData(hierarchyDataFromAPI);}catch(error){console.error(\"Error loading data:\",error);toast.error(\"Error loading employee and hierarchy data\");}finally{setLoading(false);}};loadData();},[]);// Get available employees for dropdown with search-friendly format\nconst availableEmployees=useMemo(()=>{return employees.map(emp=>({value:emp.id,label:\"\".concat(emp.name,\" (\").concat(emp.id,\") - \").concat(emp.department),searchValue:\"\".concat(emp.name,\" \").concat(emp.id,\" \").concat(emp.department).toLowerCase()}));},[employees]);// Get available managers (all employees can be managers)\nconst availableManagers=availableEmployees;// Build hierarchy structure for visualization\nconst hierarchyStructure=useMemo(()=>{const empMap=new Map(employees.map(emp=>[emp.id,emp]));const childrenMap=new Map();// Initialize children map\nemployees.forEach(emp=>{childrenMap.set(emp.id,[]);});// Build children relationships from hierarchy data\nhierarchyData.forEach(rel=>{const managerId=rel.reportsTo;if(childrenMap.has(managerId)){const employee=empMap.get(rel.employeeId);if(employee){childrenMap.get(managerId).push(employee);}}});// Find true root managers (those who don't report to anyone but have people in the hierarchy)\nconst employeesInHierarchy=new Set();const managersInHierarchy=new Set();hierarchyData.forEach(rel=>{employeesInHierarchy.add(rel.employeeId);managersInHierarchy.add(rel.reportsTo);});// Root managers are those who:\n// 1. Are managers in the hierarchy (have people reporting to them)\n// 2. Are NOT employees in the hierarchy (don't report to anyone themselves)\nconst rootManagers=[...managersInHierarchy].filter(managerId=>!employeesInHierarchy.has(managerId)).map(managerId=>empMap.get(managerId)).filter(Boolean);return{empMap,childrenMap,topLevel:rootManagers};},[hierarchyData,employees]);const handleAddRelationship=async()=>{if(!selectedEmployee||!selectedManager){toast.error(\"Please select both employee and manager\");return;}if(selectedEmployee===selectedManager){toast.error(\"Employee cannot report to themselves\");return;}// Check if relationship already exists\nconst existingRelation=hierarchyData.find(rel=>rel.employeeId===selectedEmployee);if(existingRelation){toast.error(\"This employee already has a reporting manager\");return;}try{// Create new relationship via API\nconst newRelation=await hierarchyAPI.create({employeeId:selectedEmployee,reportsTo:selectedManager});// Update local state\nsetHierarchyData(prev=>[...prev,newRelation]);setSelectedEmployee(\"\");setSelectedManager(\"\");toast.success(\"Reporting relationship added successfully!\");}catch(error){console.error(\"Error adding relationship:\",error);toast.error(\"Failed to add reporting relationship\");}};const handleRemoveRelationship=async employeeId=>{try{await hierarchyAPI.remove(employeeId);setHierarchyData(prev=>prev.filter(rel=>rel.employeeId!==employeeId));toast.success(\"Reporting relationship removed successfully!\");}catch(error){console.error(\"Error removing relationship:\",error);toast.error(\"Failed to remove reporting relationship\");}};const handleClearAll=async()=>{try{await hierarchyAPI.clearAll();setHierarchyData([]);toast.success(\"All reporting relationships cleared successfully!\");}catch(error){console.error(\"Error clearing relationships:\",error);toast.error(\"Failed to clear reporting relationships\");}};const getEmployeeName=employeeId=>{const employee=employees.find(emp=>emp.id===employeeId);return employee?employee.name:employeeId;};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center py-20\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-4 text-blue-600\",children:\"Loading employee and hierarchy data...\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsx(Card,{className:\"border-blue-200 shadow-sm bg-white\",children:/*#__PURE__*/_jsx(CardHeader,{className:\"pb-4 bg-blue-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center\",children:[/*#__PURE__*/_jsxs(CardTitle,{className:\"flex items-center space-x-2 text-blue-900\",children:[/*#__PURE__*/_jsx(Shield,{className:\"h-5 w-5\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Hierarchy Builder\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2\",children:[/*#__PURE__*/_jsxs(Button,{variant:viewMode===\"tree\"?\"default\":\"outline\",size:\"sm\",onClick:()=>setViewMode(\"tree\"),className:\"flex items-center space-x-2 \".concat(viewMode===\"tree\"?\"bg-blue-600 hover:bg-blue-700\":\"border-blue-200 text-blue-700 hover:bg-blue-50\"),children:[/*#__PURE__*/_jsx(Network,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Box View\"})]}),/*#__PURE__*/_jsxs(Button,{variant:viewMode===\"table\"?\"default\":\"outline\",size:\"sm\",onClick:()=>setViewMode(\"table\"),className:\"flex items-center space-x-2 \".concat(viewMode===\"table\"?\"bg-blue-600 hover:bg-blue-700\":\"border-blue-200 text-blue-700 hover:bg-blue-50\"),children:[/*#__PURE__*/_jsx(TableIcon,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Table View\"})]})]})]})})}),/*#__PURE__*/_jsxs(Card,{className:\"border-blue-200 shadow-sm bg-white\",children:[/*#__PURE__*/_jsx(CardHeader,{className:\"bg-blue-50\",children:/*#__PURE__*/_jsx(CardTitle,{className:\"text-lg text-blue-900\",children:\"Add Reporting Relationship\"})}),/*#__PURE__*/_jsx(CardContent,{className:\"space-y-4 p-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"text-sm font-medium text-blue-900\",children:\"Select Employee\"}),/*#__PURE__*/_jsx(SearchableSelect,{value:selectedEmployee,onValueChange:setSelectedEmployee,options:availableEmployees,placeholder:\"Choose employee...\",searchPlaceholder:\"Search employees...\",className:\"border-blue-200 focus:border-blue-400\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"text-sm font-medium text-blue-900\",children:\"Reports To\"}),/*#__PURE__*/_jsx(SearchableSelect,{value:selectedManager,onValueChange:setSelectedManager,options:availableManagers,placeholder:\"Choose manager...\",searchPlaceholder:\"Search managers...\",className:\"border-blue-200 focus:border-blue-400\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2 items-end\",children:[/*#__PURE__*/_jsxs(Button,{onClick:handleAddRelationship,className:\"flex-1 bg-blue-600 hover:bg-blue-700\",children:[/*#__PURE__*/_jsx(Plus,{className:\"h-4 w-4 mr-2\"}),\"Add\"]}),/*#__PURE__*/_jsxs(Button,{variant:\"outline\",onClick:handleClearAll,className:\"flex items-center space-x-2 border-blue-200 text-blue-700 hover:bg-blue-50\",children:[/*#__PURE__*/_jsx(RotateCcw,{className:\"h-4 w-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Clear All\"})]})]})]})})]}),/*#__PURE__*/_jsxs(Card,{className:\"border-blue-200 shadow-sm bg-white\",children:[/*#__PURE__*/_jsx(CardHeader,{className:\"bg-blue-50\",children:/*#__PURE__*/_jsxs(CardTitle,{className:\"text-lg text-blue-900\",children:[\"Current Relationships (\",hierarchyData.length,\")\"]})}),/*#__PURE__*/_jsx(CardContent,{className:\"p-6\",children:hierarchyData.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"text-center py-8 text-blue-500\",children:[/*#__PURE__*/_jsx(Users,{className:\"h-12 w-12 mx-auto mb-4 opacity-50\"}),/*#__PURE__*/_jsx(\"p\",{children:\"No reporting relationships defined yet.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm\",children:\"Add relationships above to build the organizational hierarchy.\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-4\",children:hierarchyData.map(rel=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-200\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-1\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"font-medium text-sm text-blue-900\",children:getEmployeeName(rel.employeeId)}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-xs text-blue-600\",children:[\"reports to \",getEmployeeName(rel.reportsTo)]})]}),/*#__PURE__*/_jsx(Button,{variant:\"ghost\",size:\"sm\",onClick:()=>handleRemoveRelationship(rel.employeeId),className:\"text-red-600 hover:text-red-700 hover:bg-red-50\",children:/*#__PURE__*/_jsx(Trash2,{className:\"h-4 w-4\"})})]},rel.employeeId))})})]}),hierarchyData.length>0&&/*#__PURE__*/_jsxs(Card,{className:\"border-blue-200 shadow-sm bg-white\",children:[/*#__PURE__*/_jsx(CardHeader,{className:\"bg-blue-50\",children:/*#__PURE__*/_jsx(CardTitle,{className:\"text-lg text-blue-900\",children:viewMode===\"tree\"?\"Organizational Structure\":\"Hierarchy Table\"})}),/*#__PURE__*/_jsx(CardContent,{className:\"p-6\",children:viewMode===\"tree\"?/*#__PURE__*/_jsx(HierarchyTree,{hierarchyStructure:hierarchyStructure}):/*#__PURE__*/_jsx(HierarchyTable,{hierarchyData:hierarchyData,employees:employees})})]})]});};export default HierarchyBuilder;","map":{"version":3,"names":["React","useState","useMemo","useEffect","Users","Plus","Trash2","RotateCcw","Network","Table","TableIcon","Save","Shield","RefreshCw","Card","CardContent","CardHeader","CardTitle","Button","Badge","employeeAPI","hierarchyAPI","HierarchyTree","HierarchyTable","SearchableSelect","toast","jsx","_jsx","jsxs","_jsxs","HierarchyBuilder","hierarchyData","setHierarchyData","selectedEmployee","setSelectedEmployee","selectedManager","setSelectedManager","viewMode","setViewMode","employees","setEmployees","loading","setLoading","hasUnsavedChanges","setHasUnsavedChanges","isSaving","setIsSaving","loadData","employeeData","hierarchyDataFromAPI","Promise","all","getAll","error","console","availableEmployees","map","emp","value","id","label","concat","name","department","searchValue","toLowerCase","availableManagers","hierarchyStructure","empMap","Map","childrenMap","forEach","set","rel","managerId","reportsTo","has","employee","get","employeeId","push","employeesInHierarchy","Set","managersInHierarchy","add","rootManagers","filter","Boolean","topLevel","handleAddRelationship","existingRelation","find","newRelation","create","prev","success","handleRemoveRelationship","remove","handleClearAll","clearAll","getEmployeeName","className","children","variant","size","onClick","onValueChange","options","placeholder","searchPlaceholder","length"],"sources":["D:/SMARTDESK APPLICATION FILES/EMPLOYEE_DIR_BETA1/frontend/src/components/HierarchyBuilder.jsx"],"sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\r\nimport { Users, Plus, Trash2, RotateCcw, Network, Table as TableIcon, Save, Shield, RefreshCw } from \"lucide-react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\r\nimport { Button } from \"./ui/button\";\r\nimport { Badge } from \"./ui/badge\";\r\nimport { employeeAPI, hierarchyAPI } from \"../services/api\";\r\nimport HierarchyTree from \"./HierarchyTree\";\r\nimport HierarchyTable from \"./HierarchyTable\";\r\nimport SearchableSelect from \"./ui/searchable-select\";\r\nimport { toast } from \"sonner\";\r\n\r\nconst HierarchyBuilder = () => {\r\n  const [hierarchyData, setHierarchyData] = useState([]);\r\n  const [selectedEmployee, setSelectedEmployee] = useState(\"\");\r\n  const [selectedManager, setSelectedManager] = useState(\"\");\r\n  const [viewMode, setViewMode] = useState(\"tree\");\r\n  const [employees, setEmployees] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  // Load all employees and hierarchy data on component mount\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const [employeeData, hierarchyDataFromAPI] = await Promise.all([\r\n          employeeAPI.getAll(),\r\n          hierarchyAPI.getAll()\r\n        ]);\r\n        \r\n        setEmployees(employeeData);\r\n        setHierarchyData(hierarchyDataFromAPI);\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n        toast.error(\"Error loading employee and hierarchy data\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  // Get available employees for dropdown with search-friendly format\r\n  const availableEmployees = useMemo(() => {\r\n    return employees.map(emp => ({\r\n      value: emp.id,\r\n      label: `${emp.name} (${emp.id}) - ${emp.department}`,\r\n      searchValue: `${emp.name} ${emp.id} ${emp.department}`.toLowerCase()\r\n    }));\r\n  }, [employees]);\r\n\r\n  // Get available managers (all employees can be managers)\r\n  const availableManagers = availableEmployees;\r\n\r\n  // Build hierarchy structure for visualization\r\n  const hierarchyStructure = useMemo(() => {\r\n    const empMap = new Map(employees.map(emp => [emp.id, emp]));\r\n    const childrenMap = new Map();\r\n    \r\n    // Initialize children map\r\n    employees.forEach(emp => {\r\n      childrenMap.set(emp.id, []);\r\n    });\r\n\r\n    // Build children relationships from hierarchy data\r\n    hierarchyData.forEach(rel => {\r\n      const managerId = rel.reportsTo;\r\n      if (childrenMap.has(managerId)) {\r\n        const employee = empMap.get(rel.employeeId);\r\n        if (employee) {\r\n          childrenMap.get(managerId).push(employee);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Find true root managers (those who don't report to anyone but have people in the hierarchy)\r\n    const employeesInHierarchy = new Set();\r\n    const managersInHierarchy = new Set();\r\n    \r\n    hierarchyData.forEach(rel => {\r\n      employeesInHierarchy.add(rel.employeeId);\r\n      managersInHierarchy.add(rel.reportsTo);\r\n    });\r\n    \r\n    // Root managers are those who:\r\n    // 1. Are managers in the hierarchy (have people reporting to them)\r\n    // 2. Are NOT employees in the hierarchy (don't report to anyone themselves)\r\n    const rootManagers = [...managersInHierarchy]\r\n      .filter(managerId => !employeesInHierarchy.has(managerId))\r\n      .map(managerId => empMap.get(managerId))\r\n      .filter(Boolean);\r\n\r\n    return { empMap, childrenMap, topLevel: rootManagers };\r\n  }, [hierarchyData, employees]);\r\n\r\n  const handleAddRelationship = async () => {\r\n    if (!selectedEmployee || !selectedManager) {\r\n      toast.error(\"Please select both employee and manager\");\r\n      return;\r\n    }\r\n\r\n    if (selectedEmployee === selectedManager) {\r\n      toast.error(\"Employee cannot report to themselves\");\r\n      return;\r\n    }\r\n\r\n    // Check if relationship already exists\r\n    const existingRelation = hierarchyData.find(rel => rel.employeeId === selectedEmployee);\r\n    if (existingRelation) {\r\n      toast.error(\"This employee already has a reporting manager\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create new relationship via API\r\n      const newRelation = await hierarchyAPI.create({\r\n        employeeId: selectedEmployee,\r\n        reportsTo: selectedManager\r\n      });\r\n\r\n      // Update local state\r\n      setHierarchyData(prev => [...prev, newRelation]);\r\n      setSelectedEmployee(\"\");\r\n      setSelectedManager(\"\");\r\n      toast.success(\"Reporting relationship added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding relationship:\", error);\r\n      toast.error(\"Failed to add reporting relationship\");\r\n    }\r\n  };\r\n\r\n  const handleRemoveRelationship = async (employeeId) => {\r\n    try {\r\n      await hierarchyAPI.remove(employeeId);\r\n      setHierarchyData(prev => prev.filter(rel => rel.employeeId !== employeeId));\r\n      toast.success(\"Reporting relationship removed successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error removing relationship:\", error);\r\n      toast.error(\"Failed to remove reporting relationship\");\r\n    }\r\n  };\r\n\r\n  const handleClearAll = async () => {\r\n    try {\r\n      await hierarchyAPI.clearAll();\r\n      setHierarchyData([]);\r\n      toast.success(\"All reporting relationships cleared successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error clearing relationships:\", error);\r\n      toast.error(\"Failed to clear reporting relationships\");\r\n    }\r\n  };\r\n\r\n  const getEmployeeName = (employeeId) => {\r\n    const employee = employees.find(emp => emp.id === employeeId);\r\n    return employee ? employee.name : employeeId;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center py-20\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"mt-4 text-blue-600\">Loading employee and hierarchy data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with View Toggle */}\r\n      <Card className=\"border-blue-200 shadow-sm bg-white\">\r\n        <CardHeader className=\"pb-4 bg-blue-50\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\r\n              <Shield className=\"h-5 w-5\" />\r\n              <span>Hierarchy Builder</span>\r\n            </CardTitle>\r\n            \r\n            <div className=\"flex space-x-2\">\r\n              <Button\r\n                variant={viewMode === \"tree\" ? \"default\" : \"outline\"}\r\n                size=\"sm\"\r\n                onClick={() => setViewMode(\"tree\")}\r\n                className={`flex items-center space-x-2 ${\r\n                  viewMode === \"tree\" \r\n                    ? \"bg-blue-600 hover:bg-blue-700\" \r\n                    : \"border-blue-200 text-blue-700 hover:bg-blue-50\"\r\n                }`}\r\n              >\r\n                <Network className=\"h-4 w-4\" />\r\n                <span>Box View</span>\r\n              </Button>\r\n              <Button\r\n                variant={viewMode === \"table\" ? \"default\" : \"outline\"}\r\n                size=\"sm\"\r\n                onClick={() => setViewMode(\"table\")}\r\n                className={`flex items-center space-x-2 ${\r\n                  viewMode === \"table\" \r\n                    ? \"bg-blue-600 hover:bg-blue-700\" \r\n                    : \"border-blue-200 text-blue-700 hover:bg-blue-50\"\r\n                }`}\r\n              >\r\n                <TableIcon className=\"h-4 w-4\" />\r\n                <span>Table View</span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      {/* Add Relationship Form */}\r\n      <Card className=\"border-blue-200 shadow-sm bg-white\">\r\n        <CardHeader className=\"bg-blue-50\">\r\n          <CardTitle className=\"text-lg text-blue-900\">Add Reporting Relationship</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4 p-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n            {/* Select Employee */}\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium text-blue-900\">Select Employee</label>\r\n              <SearchableSelect\r\n                value={selectedEmployee}\r\n                onValueChange={setSelectedEmployee}\r\n                options={availableEmployees}\r\n                placeholder=\"Choose employee...\"\r\n                searchPlaceholder=\"Search employees...\"\r\n                className=\"border-blue-200 focus:border-blue-400\"\r\n              />\r\n            </div>\r\n\r\n            {/* Select Manager */}\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium text-blue-900\">Reports To</label>\r\n              <SearchableSelect\r\n                value={selectedManager}\r\n                onValueChange={setSelectedManager}\r\n                options={availableManagers}\r\n                placeholder=\"Choose manager...\"\r\n                searchPlaceholder=\"Search managers...\"\r\n                className=\"border-blue-200 focus:border-blue-400\"\r\n              />\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex space-x-2 items-end\">\r\n              <Button \r\n                onClick={handleAddRelationship} \r\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\r\n              >\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Add\r\n              </Button>\r\n              <Button \r\n                variant=\"outline\" \r\n                onClick={handleClearAll}\r\n                className=\"flex items-center space-x-2 border-blue-200 text-blue-700 hover:bg-blue-50\"\r\n              >\r\n                <RotateCcw className=\"h-4 w-4\" />\r\n                <span>Clear All</span>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Current Relationships Summary */}\r\n      <Card className=\"border-blue-200 shadow-sm bg-white\">\r\n        <CardHeader className=\"bg-blue-50\">\r\n          <CardTitle className=\"text-lg text-blue-900\">Current Relationships ({hierarchyData.length})</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"p-6\">\r\n          {hierarchyData.length === 0 ? (\r\n            <div className=\"text-center py-8 text-blue-500\">\r\n              <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n              <p>No reporting relationships defined yet.</p>\r\n              <p className=\"text-sm\">Add relationships above to build the organizational hierarchy.</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n              {hierarchyData.map(rel => (\r\n                <div key={rel.employeeId} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-200\">\r\n                  <div className=\"space-y-1\">\r\n                    <p className=\"font-medium text-sm text-blue-900\">{getEmployeeName(rel.employeeId)}</p>\r\n                    <p className=\"text-xs text-blue-600\">reports to {getEmployeeName(rel.reportsTo)}</p>\r\n                  </div>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => handleRemoveRelationship(rel.employeeId)}\r\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                  >\r\n                    <Trash2 className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Hierarchy Visualization */}\r\n      {hierarchyData.length > 0 && (\r\n        <Card className=\"border-blue-200 shadow-sm bg-white\">\r\n          <CardHeader className=\"bg-blue-50\">\r\n            <CardTitle className=\"text-lg text-blue-900\">\r\n              {viewMode === \"tree\" ? \"Organizational Structure\" : \"Hierarchy Table\"}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"p-6\">\r\n            {viewMode === \"tree\" ? (\r\n              <HierarchyTree hierarchyStructure={hierarchyStructure} />\r\n            ) : (\r\n              <HierarchyTable hierarchyData={hierarchyData} employees={employees} />\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HierarchyBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}