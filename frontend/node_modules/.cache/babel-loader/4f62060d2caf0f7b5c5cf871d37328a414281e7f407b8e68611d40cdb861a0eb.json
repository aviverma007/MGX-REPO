{"ast":null,"code":"import * as XLSX from 'xlsx';\nclass DataService {\n  constructor() {\n    this.employees = [];\n    this.attendance = [];\n    this.hierarchy = [];\n    this.departments = [];\n    this.locations = [];\n    this.news = [];\n    this.tasks = [];\n    this.knowledge = [];\n    this.help = [];\n    this.policies = [];\n    this.workflows = [];\n    this.meetingRooms = [];\n    this.alerts = []; // Add alerts array\n    this.isLoaded = false;\n  }\n\n  // Load Excel files and parse data\n  async loadAllData() {\n    try {\n      console.log('Loading data from Excel files...');\n\n      // Load employee data\n      await this.loadEmployeeData();\n\n      // Load attendance data\n      await this.loadAttendanceData();\n\n      // Initialize other data structures\n      this.initializeOtherData();\n\n      // Initialize demo alerts for testing\n      this.initializeDemoAlerts();\n      this.isLoaded = true;\n      console.log('All data loaded successfully');\n      return {\n        employees: this.employees.length,\n        attendance: this.attendance.length,\n        departments: this.departments.length,\n        locations: this.locations.length\n      };\n    } catch (error) {\n      console.error('Error loading data:', error);\n      throw error;\n    }\n  }\n\n  // Load employee data from Excel\n  async loadEmployeeData() {\n    try {\n      const response = await fetch('/employee_directory.xlsx');\n      const arrayBuffer = await response.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n      this.employees = jsonData.map(row => {\n        // Convert mobile number safely\n        const mobile = row['MOBILE'] ? String(row['MOBILE']) : '';\n\n        // Convert extension safely\n        const extension = row['EXTENSION NUMBER'] ? String(row['EXTENSION NUMBER']) : '0';\n\n        // Handle reporting ID\n        let reportingId = null;\n        if (row['REPORTING ID'] && String(row['REPORTING ID']).trim() !== '') {\n          reportingId = String(row['REPORTING ID']);\n        }\n\n        // Handle date of joining - Convert Excel serial number to date\n        let dateJoining = '';\n        if (row['DATE OF JOINING']) {\n          try {\n            const rawDate = row['DATE OF JOINING'];\n\n            // If it's a number (Excel serial date), convert it\n            if (typeof rawDate === 'number') {\n              // Excel serial date: days since January 1, 1900\n              // JavaScript Date: milliseconds since January 1, 1970\n              // Excel epoch: January 1, 1900 (but Excel incorrectly treats 1900 as leap year)\n              const excelEpoch = new Date(1900, 0, 1); // January 1, 1900\n              const msPerDay = 24 * 60 * 60 * 1000;\n              // Subtract 2 days to account for Excel's leap year bug and 0-indexing\n              const jsDate = new Date(excelEpoch.getTime() + (rawDate - 2) * msPerDay);\n              dateJoining = jsDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD\n            }\n            // If it's already a string, try to parse it\n            else if (typeof rawDate === 'string') {\n              const parsedDate = new Date(rawDate);\n              if (!isNaN(parsedDate.getTime())) {\n                dateJoining = parsedDate.toISOString().split('T')[0];\n              } else {\n                dateJoining = String(rawDate).split(' ')[0];\n              }\n            }\n            // If it's a Date object\n            else if (rawDate instanceof Date) {\n              dateJoining = rawDate.toISOString().split('T')[0];\n            }\n            // Fallback\n            else {\n              dateJoining = String(rawDate);\n            }\n          } catch (error) {\n            console.warn('Error parsing date for employee:', row['EMP NAME'], 'Raw date:', row['DATE OF JOINING']);\n            dateJoining = String(row['DATE OF JOINING']);\n          }\n        }\n        return {\n          id: String(row['EMP ID']),\n          name: String(row['EMP NAME'] || '').trim(),\n          department: String(row['DEPARTMENT'] || '').trim(),\n          grade: String(row['GRADE'] || '').trim(),\n          reportingManager: row['REPORTING MANAGER'] ? String(row['REPORTING MANAGER']).trim() : '*',\n          reportingId: reportingId,\n          location: String(row['LOCATION'] || '').trim(),\n          mobile: mobile,\n          extension: extension,\n          email: String(row['EMAIL ID'] || '').trim(),\n          dateOfJoining: dateJoining,\n          profileImage: '/api/placeholder/150/150'\n        };\n      });\n\n      // Extract unique departments and locations\n      this.departments = ['All Departments', ...new Set(this.employees.map(emp => emp.department).filter(dept => dept))];\n      this.locations = ['All Locations', ...new Set(this.employees.map(emp => emp.location).filter(loc => loc))];\n      console.log(`Loaded ${this.employees.length} employees`);\n    } catch (error) {\n      console.error('Error loading employee data:', error);\n      throw error;\n    }\n  }\n\n  // Load attendance data from Excel\n  async loadAttendanceData() {\n    try {\n      const response = await fetch('/attendance_data.xlsx');\n      const arrayBuffer = await response.arrayBuffer();\n      const workbook = XLSX.read(arrayBuffer, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n      this.attendance = jsonData.map((row, index) => {\n        // Parse dates and times\n        const dateStr = String(row['date']);\n        let dateFormatted = '';\n        if (dateStr.includes('T')) {\n          const dateObj = new Date(dateStr);\n          dateFormatted = dateObj.toISOString().split('T')[0];\n        } else {\n          dateFormatted = dateStr.substring(0, 10);\n        }\n\n        // Parse punch in/out times\n        let punchIn = null,\n          punchOut = null;\n        if (row['punch_in'] && String(row['punch_in']) !== 'nan') {\n          punchIn = new Date(String(row['punch_in'])).toISOString();\n        }\n        if (row['punch_out'] && String(row['punch_out']) !== 'nan') {\n          punchOut = new Date(String(row['punch_out'])).toISOString();\n        }\n        return {\n          id: `att_${(index + 1).toString().padStart(4, '0')}`,\n          employee_id: String(row['employee_id']),\n          employee_name: String(row['employee_name']),\n          date: dateFormatted,\n          punch_in: punchIn,\n          punch_out: punchOut,\n          punch_in_location: row['punch_in_location'] ? String(row['punch_in_location']) : null,\n          punch_out_location: row['punch_out_location'] ? String(row['punch_out_location']) : null,\n          status: String(row['status']).toLowerCase(),\n          total_hours: row['total_hours'] ? parseFloat(row['total_hours']) : 0.0,\n          remarks: row['remarks'] && String(row['remarks']) !== 'nan' ? String(row['remarks']) : null,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n      });\n      console.log(`Loaded ${this.attendance.length} attendance records`);\n    } catch (error) {\n      console.error('Error loading attendance data:', error);\n      // If attendance file doesn't exist, create sample data\n      this.attendance = this.generateSampleAttendance();\n    }\n  }\n\n  // Initialize other data structures with sample data\n  initializeOtherData() {\n    // Initialize meeting rooms with persistence\n    this.meetingRooms = this.generateMeetingRooms();\n\n    // Initialize sample data for other modules\n    this.news = [];\n    this.tasks = [];\n    this.knowledge = [];\n    this.help = [];\n    this.policies = this.generateSamplePolicies();\n    this.workflows = [];\n\n    // Update locations to include all meeting room locations\n    const meetingRoomLocations = [...new Set(this.meetingRooms.map(room => room.location))];\n    this.locations = [...new Set([...this.locations, ...meetingRoomLocations])];\n  }\n\n  // Generate sample attendance data if Excel file is not available\n  generateSampleAttendance() {\n    const sampleEmployees = this.employees.slice(0, 5);\n    const attendance = [];\n    const statuses = ['present', 'late', 'half_day'];\n    const locations = ['IFC Office', 'Remote', 'Client Site'];\n\n    // Generate last 7 days of data\n    for (let i = 0; i < 7; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      if (date.getDay() !== 0 && date.getDay() !== 6) {\n        // Skip weekends\n        sampleEmployees.forEach((emp, j) => {\n          const punchIn = new Date(date);\n          punchIn.setHours(9, Math.floor(Math.random() * 30));\n          const punchOut = new Date(date);\n          punchOut.setHours(17, 30 + Math.floor(Math.random() * 30));\n          attendance.push({\n            id: `att_${(attendance.length + 1).toString().padStart(4, '0')}`,\n            employee_id: emp.id,\n            employee_name: emp.name,\n            date: date.toISOString().split('T')[0],\n            punch_in: punchIn.toISOString(),\n            punch_out: punchOut.toISOString(),\n            punch_in_location: locations[Math.floor(Math.random() * locations.length)],\n            punch_out_location: locations[Math.floor(Math.random() * locations.length)],\n            status: statuses[Math.floor(Math.random() * statuses.length)],\n            total_hours: Math.round((punchOut - punchIn) / (1000 * 60 * 60) * 100) / 100,\n            remarks: null,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n        });\n      }\n    }\n    return attendance;\n  }\n\n  // Generate meeting rooms data with persistence\n  generateMeetingRooms() {\n    // Try to load from localStorage first\n    const savedRooms = this.loadMeetingRoomsFromStorage();\n    if (savedRooms && savedRooms.length > 0) {\n      console.log(`Loaded ${savedRooms.length} meeting rooms from storage`);\n      return savedRooms;\n    }\n\n    // Create initial room structure\n    const rooms = [\n    // IFC 11th Floor - 1 room\n    {\n      id: \"ifc-11-001\",\n      name: \"IFC Conference Room 11A\",\n      location: \"IFC\",\n      floor: \"11th Floor\",\n      capacity: 10,\n      amenities: \"Projector, Whiteboard, Video Conference\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    },\n    // IFC 12th Floor - 1 room\n    {\n      id: \"ifc-12-001\",\n      name: \"IFC Conference Room 12B\",\n      location: \"IFC\",\n      floor: \"12th Floor\",\n      capacity: 6,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    },\n    // IFC 14th Floor - Multiple rooms (9 rooms as per test results)\n    {\n      id: \"ifc-14-001\",\n      name: \"OVAL MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 10,\n      amenities: \"Projector, Video Conference, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-002\",\n      name: \"PETRONAS MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-003\",\n      name: \"GLOBAL CENTER MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-004\",\n      name: \"LOUVRE MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-005\",\n      name: \"GOLDEN GATE MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 10,\n      amenities: \"Projector, Video Conference, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-006\",\n      name: \"EMPIRE STATE MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-007\",\n      name: \"MARINA BAY MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-008\",\n      name: \"BURJ MEETING ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 5,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"ifc-14-009\",\n      name: \"BOARD ROOM\",\n      location: \"IFC\",\n      floor: \"14th Floor\",\n      capacity: 20,\n      amenities: \"Projector, Video Conference, Whiteboard, Audio System\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    },\n    // Other locations - 1 room each on floor 1\n    {\n      id: \"central-1-001\",\n      name: \"Central Office Conference Room\",\n      location: \"Central Office 75\",\n      floor: \"1st Floor\",\n      capacity: 8,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"office75-1-001\",\n      name: \"Office 75 Meeting Room\",\n      location: \"Office 75\",\n      floor: \"1st Floor\",\n      capacity: 6,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"noida-1-001\",\n      name: \"Noida Conference Room\",\n      location: \"Noida\",\n      floor: \"1st Floor\",\n      capacity: 12,\n      amenities: \"Projector, Video Conference, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }, {\n      id: \"project-1-001\",\n      name: \"Project Office Meeting Room\",\n      location: \"Project Office\",\n      floor: \"1st Floor\",\n      capacity: 8,\n      amenities: \"Projector, Whiteboard\",\n      status: \"vacant\",\n      bookings: [],\n      current_booking: null\n    }];\n\n    // Save initial structure to storage\n    this.saveMeetingRoomsToStorage(rooms);\n    console.log(`Generated and saved ${rooms.length} meeting rooms`);\n    return rooms;\n  }\n\n  // Load meeting rooms from localStorage\n  loadMeetingRoomsFromStorage() {\n    try {\n      const saved = localStorage.getItem('meetingRooms_data');\n      if (saved) {\n        const parsed = JSON.parse(saved);\n        // Clean up expired bookings on load\n        this.cleanupExpiredBookings(parsed);\n        return parsed;\n      }\n    } catch (error) {\n      console.error('Error loading meeting rooms from storage:', error);\n    }\n    return null;\n  }\n\n  // Save meeting rooms to localStorage\n  saveMeetingRoomsToStorage(rooms = null) {\n    try {\n      const roomsToSave = rooms || this.meetingRooms;\n      localStorage.setItem('meetingRooms_data', JSON.stringify(roomsToSave));\n      localStorage.setItem('meetingRooms_lastSaved', new Date().toISOString());\n    } catch (error) {\n      console.error('Error saving meeting rooms to storage:', error);\n    }\n  }\n\n  // Clean up expired bookings\n  cleanupExpiredBookings(rooms) {\n    const now = new Date();\n    rooms.forEach(room => {\n      if (room.current_booking) {\n        const endTime = new Date(room.current_booking.end_time);\n        if (endTime < now) {\n          room.status = 'vacant';\n          room.current_booking = null;\n          room.bookings = [];\n        }\n      }\n    });\n  }\n\n  // Generate sample policies\n  generateSamplePolicies() {\n    return [{\n      id: \"policy_001\",\n      title: \"Employee Code of Conduct\",\n      category: \"hr\",\n      content: \"Guidelines for professional behavior and conduct\",\n      effective_date: \"2024-01-01\",\n      version: \"1.0\"\n    }, {\n      id: \"policy_002\",\n      title: \"IT Security Policy\",\n      category: \"it\",\n      content: \"Information technology security guidelines and procedures\",\n      effective_date: \"2024-01-01\",\n      version: \"1.0\"\n    }];\n  }\n\n  // Employee API methods\n  async getEmployees(searchParams = {}) {\n    if (!this.isLoaded) await this.loadAllData();\n    let filtered = [...this.employees];\n    if (searchParams.search) {\n      const search = searchParams.search.toLowerCase();\n      filtered = filtered.filter(emp => emp.name.toLowerCase().startsWith(search) || emp.id.toLowerCase().startsWith(search) || emp.department.toLowerCase().startsWith(search) || emp.location.toLowerCase().startsWith(search) || emp.grade.toLowerCase().startsWith(search) || emp.mobile.startsWith(search));\n    }\n    if (searchParams.department && searchParams.department !== 'All Departments') {\n      filtered = filtered.filter(emp => emp.department === searchParams.department);\n    }\n    if (searchParams.location && searchParams.location !== 'All Locations') {\n      filtered = filtered.filter(emp => emp.location === searchParams.location);\n    }\n    return filtered;\n  }\n  async updateEmployeeImage(employeeId, imageData) {\n    if (!this.isLoaded) await this.loadAllData();\n    const employee = this.employees.find(emp => emp.id === employeeId);\n    if (employee) {\n      employee.profileImage = imageData.profileImage || imageData;\n      return employee;\n    }\n    throw new Error('Employee not found');\n  }\n\n  // Utility methods\n  async getDepartments() {\n    if (!this.isLoaded) await this.loadAllData();\n    return this.departments;\n  }\n  async getLocations() {\n    if (!this.isLoaded) await this.loadAllData();\n    return this.locations;\n  }\n  async getStats() {\n    if (!this.isLoaded) await this.loadAllData();\n    return {\n      database: {\n        employees: this.employees.length,\n        departments: this.departments.length - 1,\n        // Exclude \"All Departments\"\n        locations: this.locations.length - 1,\n        // Exclude \"All Locations\"\n        attendance_records: this.attendance.length,\n        hierarchy_relations: this.hierarchy.length\n      },\n      excel: {\n        total_employees: this.employees.length,\n        departments_count: this.departments.length - 1,\n        locations_count: this.locations.length - 1\n      }\n    };\n  }\n\n  // Hierarchy methods\n  async getHierarchy() {\n    return this.hierarchy;\n  }\n  async createHierarchy(relationshipData) {\n    const newRelation = {\n      id: `hier_${Date.now()}`,\n      ...relationshipData,\n      created_at: new Date().toISOString()\n    };\n    this.hierarchy.push(newRelation);\n    return newRelation;\n  }\n  async deleteHierarchy(relationId) {\n    const index = this.hierarchy.findIndex(h => h.id === relationId);\n    if (index > -1) {\n      this.hierarchy.splice(index, 1);\n      return {\n        message: 'Hierarchy relationship deleted'\n      };\n    }\n    throw new Error('Hierarchy relationship not found');\n  }\n  async clearAllHierarchy() {\n    this.hierarchy = [];\n    return {\n      message: 'All hierarchy relationships cleared'\n    };\n  }\n\n  // News methods\n  async getNews() {\n    return this.news;\n  }\n  async createNews(newsData) {\n    const newNews = {\n      id: `news_${Date.now()}`,\n      ...newsData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.news.unshift(newNews);\n    return newNews;\n  }\n  async updateNews(id, newsData) {\n    const index = this.news.findIndex(n => n.id === id);\n    if (index > -1) {\n      this.news[index] = {\n        ...this.news[index],\n        ...newsData,\n        updated_at: new Date().toISOString()\n      };\n      return this.news[index];\n    }\n    throw new Error('News not found');\n  }\n  async deleteNews(id) {\n    const index = this.news.findIndex(n => n.id === id);\n    if (index > -1) {\n      this.news.splice(index, 1);\n      return {\n        message: 'News deleted'\n      };\n    }\n    throw new Error('News not found');\n  }\n\n  // Task methods\n  async getTasks() {\n    return this.tasks;\n  }\n  async createTask(taskData) {\n    const newTask = {\n      id: `task_${Date.now()}`,\n      ...taskData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.tasks.unshift(newTask);\n    return newTask;\n  }\n  async updateTask(id, taskData) {\n    const index = this.tasks.findIndex(t => t.id === id);\n    if (index > -1) {\n      this.tasks[index] = {\n        ...this.tasks[index],\n        ...taskData,\n        updated_at: new Date().toISOString()\n      };\n      return this.tasks[index];\n    }\n    throw new Error('Task not found');\n  }\n  async deleteTask(id) {\n    const index = this.tasks.findIndex(t => t.id === id);\n    if (index > -1) {\n      this.tasks.splice(index, 1);\n      return {\n        message: 'Task deleted'\n      };\n    }\n    throw new Error('Task not found');\n  }\n\n  // Knowledge methods\n  async getKnowledge() {\n    return this.knowledge;\n  }\n  async createKnowledge(knowledgeData) {\n    const newKnowledge = {\n      id: `knowledge_${Date.now()}`,\n      ...knowledgeData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.knowledge.unshift(newKnowledge);\n    return newKnowledge;\n  }\n  async updateKnowledge(id, knowledgeData) {\n    const index = this.knowledge.findIndex(k => k.id === id);\n    if (index > -1) {\n      this.knowledge[index] = {\n        ...this.knowledge[index],\n        ...knowledgeData,\n        updated_at: new Date().toISOString()\n      };\n      return this.knowledge[index];\n    }\n    throw new Error('Knowledge not found');\n  }\n  async deleteKnowledge(id) {\n    const index = this.knowledge.findIndex(k => k.id === id);\n    if (index > -1) {\n      this.knowledge.splice(index, 1);\n      return {\n        message: 'Knowledge deleted'\n      };\n    }\n    throw new Error('Knowledge not found');\n  }\n\n  // Help methods\n  async getHelp() {\n    return this.help;\n  }\n  async createHelp(helpData) {\n    const newHelp = {\n      id: `help_${Date.now()}`,\n      ...helpData,\n      replies: [],\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.help.unshift(newHelp);\n    return newHelp;\n  }\n  async updateHelp(id, helpData) {\n    const index = this.help.findIndex(h => h.id === id);\n    if (index > -1) {\n      this.help[index] = {\n        ...this.help[index],\n        ...helpData,\n        updated_at: new Date().toISOString()\n      };\n      return this.help[index];\n    }\n    throw new Error('Help request not found');\n  }\n  async addHelpReply(id, replyData) {\n    const index = this.help.findIndex(h => h.id === id);\n    if (index > -1) {\n      const reply = {\n        id: `reply_${Date.now()}`,\n        ...replyData,\n        created_at: new Date().toISOString()\n      };\n      this.help[index].replies.push(reply);\n      this.help[index].updated_at = new Date().toISOString();\n      return reply;\n    }\n    throw new Error('Help request not found');\n  }\n  async deleteHelp(id) {\n    const index = this.help.findIndex(h => h.id === id);\n    if (index > -1) {\n      this.help.splice(index, 1);\n      return {\n        message: 'Help request deleted'\n      };\n    }\n    throw new Error('Help request not found');\n  }\n\n  // Meeting Rooms methods\n  async getMeetingRooms(filters = {}) {\n    // Clean up expired bookings first\n    this.cleanupExpiredBookings(this.meetingRooms);\n    let filtered = [...this.meetingRooms];\n    if (filters.location) {\n      filtered = filtered.filter(room => room.location === filters.location);\n    }\n    if (filters.floor) {\n      filtered = filtered.filter(room => room.floor === filters.floor);\n    }\n    if (filters.status) {\n      filtered = filtered.filter(room => room.status === filters.status);\n    }\n\n    // Save any changes made by cleanup\n    this.saveMeetingRoomsToStorage();\n    return filtered;\n  }\n  async bookMeetingRoom(roomId, bookingData) {\n    const room = this.meetingRooms.find(r => r.id === roomId);\n    if (!room) {\n      throw new Error('Meeting room not found');\n    }\n\n    // Check if room is already booked\n    if (room.status === 'occupied') {\n      throw new Error('Room is already booked. Multiple bookings are not allowed.');\n    }\n\n    // Validate booking times\n    const startTime = new Date(bookingData.start_time);\n    const endTime = new Date(bookingData.end_time);\n    const now = new Date();\n    if (startTime < now) {\n      throw new Error('Cannot book a room for past time');\n    }\n    if (endTime <= startTime) {\n      throw new Error('End time must be after start time');\n    }\n    const booking = {\n      id: `booking_${Date.now()}`,\n      ...bookingData,\n      room_id: roomId,\n      room_name: room.name,\n      created_at: new Date().toISOString()\n    };\n    room.bookings = [booking];\n    room.current_booking = booking;\n    room.status = 'occupied';\n\n    // Save to localStorage\n    this.saveMeetingRoomsToStorage();\n    console.log(`Room ${room.name} booked successfully for ${booking.employee_name}`);\n    return booking;\n  }\n  async cancelMeetingRoomBooking(roomId, bookingId = null) {\n    const room = this.meetingRooms.find(r => r.id === roomId);\n    if (!room) {\n      throw new Error('Meeting room not found');\n    }\n    if (room.status === 'vacant') {\n      throw new Error('No booking found to cancel');\n    }\n    const roomName = room.name;\n    const employeeName = room.current_booking ? room.current_booking.employee_name : 'Unknown';\n    room.bookings = [];\n    room.current_booking = null;\n    room.status = 'vacant';\n\n    // Save to localStorage\n    this.saveMeetingRoomsToStorage();\n    console.log(`Booking cancelled for ${roomName} (previously booked by ${employeeName})`);\n    return {\n      message: 'Booking cancelled successfully',\n      room_name: roomName\n    };\n  }\n  async clearAllMeetingRoomBookings() {\n    let cancelledCount = 0;\n    this.meetingRooms.forEach(room => {\n      if (room.status === 'occupied') {\n        cancelledCount++;\n      }\n      room.bookings = [];\n      room.current_booking = null;\n      room.status = 'vacant';\n    });\n\n    // Save to localStorage\n    this.saveMeetingRoomsToStorage();\n    console.log(`Cleared all bookings: ${cancelledCount} rooms were occupied, now all ${this.meetingRooms.length} rooms are vacant`);\n    return {\n      message: 'All bookings cleared successfully',\n      rooms_updated: this.meetingRooms.length,\n      previously_occupied: cancelledCount\n    };\n  }\n\n  // Attendance methods\n  async getAttendance(searchParams = {}) {\n    let filtered = [...this.attendance];\n    if (searchParams.search) {\n      const search = searchParams.search.toLowerCase();\n      filtered = filtered.filter(att => att.employee_name.toLowerCase().startsWith(search) || att.employee_id.toLowerCase().startsWith(search));\n    }\n    return filtered;\n  }\n  async createAttendance(attendanceData) {\n    const newAttendance = {\n      id: `att_${Date.now()}`,\n      ...attendanceData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.attendance.unshift(newAttendance);\n    return newAttendance;\n  }\n\n  // Policies methods\n  async getPolicies() {\n    return this.policies;\n  }\n  async createPolicy(policyData) {\n    const newPolicy = {\n      id: `policy_${Date.now()}`,\n      ...policyData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.policies.unshift(newPolicy);\n    return newPolicy;\n  }\n\n  // Workflows methods\n  async getWorkflows() {\n    return this.workflows;\n  }\n  async createWorkflow(workflowData) {\n    const newWorkflow = {\n      id: `workflow_${Date.now()}`,\n      ...workflowData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    this.workflows.unshift(newWorkflow);\n    return newWorkflow;\n  }\n\n  // ===== ALERTS MANAGEMENT =====\n\n  // Get all alerts\n  getAlerts() {\n    return this.alerts;\n  }\n\n  // Get active alerts (for user display)\n  getActiveAlerts() {\n    const now = new Date();\n    return this.alerts.filter(alert => alert.isActive && (!alert.expiryDate || new Date(alert.expiryDate) > now));\n  }\n\n  // Create a new alert (Admin only)\n  createAlert(alertData) {\n    const newAlert = {\n      id: `alert_${Date.now()}`,\n      title: alertData.title || 'Alert',\n      message: alertData.message || '',\n      type: alertData.type || 'info',\n      // info, warning, success, error\n      priority: alertData.priority || 'normal',\n      // high, normal, low\n      isActive: alertData.isActive !== undefined ? alertData.isActive : true,\n      expiryDate: alertData.expiryDate || null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      createdBy: alertData.createdBy || 'admin'\n    };\n    this.alerts.unshift(newAlert);\n    return newAlert;\n  }\n\n  // Update alert (Admin only)\n  updateAlert(alertId, alertData) {\n    const alertIndex = this.alerts.findIndex(alert => alert.id === alertId);\n    if (alertIndex === -1) {\n      throw new Error('Alert not found');\n    }\n    this.alerts[alertIndex] = {\n      ...this.alerts[alertIndex],\n      ...alertData,\n      updated_at: new Date().toISOString()\n    };\n    return this.alerts[alertIndex];\n  }\n\n  // Delete alert (Admin only)\n  deleteAlert(alertId) {\n    const alertIndex = this.alerts.findIndex(alert => alert.id === alertId);\n    if (alertIndex === -1) {\n      throw new Error('Alert not found');\n    }\n    const deletedAlert = this.alerts.splice(alertIndex, 1)[0];\n    return deletedAlert;\n  }\n\n  // Toggle alert status (Admin only)\n  toggleAlertStatus(alertId) {\n    const alert = this.alerts.find(alert => alert.id === alertId);\n    if (!alert) {\n      throw new Error('Alert not found');\n    }\n    alert.isActive = !alert.isActive;\n    alert.updated_at = new Date().toISOString();\n    return alert;\n  }\n\n  // Initialize demo alerts for testing\n  initializeDemoAlerts() {\n    // Only add demo alerts if alerts array is empty\n    if (this.alerts.length === 0) {\n      const demoAlerts = [{\n        id: 'alert_demo_1',\n        title: 'Welcome to SmartWorld!',\n        message: 'Welcome to the SmartWorld Employee Management System. We are excited to have you on board!',\n        type: 'success',\n        priority: 'high',\n        isActive: true,\n        expiryDate: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        createdBy: 'system'\n      }, {\n        id: 'alert_demo_2',\n        title: 'System Updates',\n        message: 'New features have been added to the system. Check out the enhanced employee directory and meeting room booking system.',\n        type: 'info',\n        priority: 'normal',\n        isActive: true,\n        expiryDate: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        createdBy: 'system'\n      }];\n      this.alerts = demoAlerts;\n      console.log('Demo alerts initialized:', this.alerts.length);\n    }\n  }\n}\n\n// Create singleton instance\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["XLSX","DataService","constructor","employees","attendance","hierarchy","departments","locations","news","tasks","knowledge","help","policies","workflows","meetingRooms","alerts","isLoaded","loadAllData","console","log","loadEmployeeData","loadAttendanceData","initializeOtherData","initializeDemoAlerts","length","error","response","fetch","arrayBuffer","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","map","row","mobile","String","extension","reportingId","trim","dateJoining","rawDate","excelEpoch","Date","msPerDay","jsDate","getTime","toISOString","split","parsedDate","isNaN","warn","id","name","department","grade","reportingManager","location","email","dateOfJoining","profileImage","Set","emp","filter","dept","loc","index","dateStr","dateFormatted","includes","dateObj","substring","punchIn","punchOut","toString","padStart","employee_id","employee_name","date","punch_in","punch_out","punch_in_location","punch_out_location","status","toLowerCase","total_hours","parseFloat","remarks","created_at","updated_at","generateSampleAttendance","generateMeetingRooms","generateSamplePolicies","meetingRoomLocations","room","sampleEmployees","slice","statuses","i","setDate","getDate","getDay","forEach","j","setHours","Math","floor","random","push","round","savedRooms","loadMeetingRoomsFromStorage","rooms","capacity","amenities","bookings","current_booking","saveMeetingRoomsToStorage","saved","localStorage","getItem","parsed","JSON","parse","cleanupExpiredBookings","roomsToSave","setItem","stringify","now","endTime","end_time","title","category","content","effective_date","version","getEmployees","searchParams","filtered","search","startsWith","updateEmployeeImage","employeeId","imageData","employee","find","Error","getDepartments","getLocations","getStats","database","attendance_records","hierarchy_relations","excel","total_employees","departments_count","locations_count","getHierarchy","createHierarchy","relationshipData","newRelation","deleteHierarchy","relationId","findIndex","h","splice","message","clearAllHierarchy","getNews","createNews","newsData","newNews","unshift","updateNews","n","deleteNews","getTasks","createTask","taskData","newTask","updateTask","t","deleteTask","getKnowledge","createKnowledge","knowledgeData","newKnowledge","updateKnowledge","k","deleteKnowledge","getHelp","createHelp","helpData","newHelp","replies","updateHelp","addHelpReply","replyData","reply","deleteHelp","getMeetingRooms","filters","bookMeetingRoom","roomId","bookingData","r","startTime","start_time","booking","room_id","room_name","cancelMeetingRoomBooking","bookingId","roomName","employeeName","clearAllMeetingRoomBookings","cancelledCount","rooms_updated","previously_occupied","getAttendance","att","createAttendance","attendanceData","newAttendance","getPolicies","createPolicy","policyData","newPolicy","getWorkflows","createWorkflow","workflowData","newWorkflow","getAlerts","getActiveAlerts","alert","isActive","expiryDate","createAlert","alertData","newAlert","priority","undefined","createdBy","updateAlert","alertId","alertIndex","deleteAlert","deletedAlert","toggleAlertStatus","demoAlerts","dataService"],"sources":["D:/SMARTDESK APPLICATION FILES/EMPLOYEE_DIR_BETA1/frontend/src/services/dataService.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\n\r\nclass DataService {\r\n  constructor() {\r\n    this.employees = [];\r\n    this.attendance = [];\r\n    this.hierarchy = [];\r\n    this.departments = [];\r\n    this.locations = [];\r\n    this.news = [];\r\n    this.tasks = [];\r\n    this.knowledge = [];\r\n    this.help = [];\r\n    this.policies = [];\r\n    this.workflows = [];\r\n    this.meetingRooms = [];\r\n    this.alerts = []; // Add alerts array\r\n    this.isLoaded = false;\r\n  }\r\n\r\n  // Load Excel files and parse data\r\n  async loadAllData() {\r\n    try {\r\n      console.log('Loading data from Excel files...');\r\n      \r\n      // Load employee data\r\n      await this.loadEmployeeData();\r\n      \r\n      // Load attendance data\r\n      await this.loadAttendanceData();\r\n      \r\n      // Initialize other data structures\r\n      this.initializeOtherData();\r\n      \r\n      // Initialize demo alerts for testing\r\n      this.initializeDemoAlerts();\r\n      \r\n      this.isLoaded = true;\r\n      console.log('All data loaded successfully');\r\n      \r\n      return {\r\n        employees: this.employees.length,\r\n        attendance: this.attendance.length,\r\n        departments: this.departments.length,\r\n        locations: this.locations.length\r\n      };\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Load employee data from Excel\r\n  async loadEmployeeData() {\r\n    try {\r\n      const response = await fetch('/employee_directory.xlsx');\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n      this.employees = jsonData.map(row => {\r\n        // Convert mobile number safely\r\n        const mobile = row['MOBILE'] ? String(row['MOBILE']) : '';\r\n        \r\n        // Convert extension safely\r\n        const extension = row['EXTENSION NUMBER'] ? String(row['EXTENSION NUMBER']) : '0';\r\n        \r\n        // Handle reporting ID\r\n        let reportingId = null;\r\n        if (row['REPORTING ID'] && String(row['REPORTING ID']).trim() !== '') {\r\n          reportingId = String(row['REPORTING ID']);\r\n        }\r\n        \r\n        // Handle date of joining - Convert Excel serial number to date\r\n        let dateJoining = '';\r\n        if (row['DATE OF JOINING']) {\r\n          try {\r\n            const rawDate = row['DATE OF JOINING'];\r\n            \r\n            // If it's a number (Excel serial date), convert it\r\n            if (typeof rawDate === 'number') {\r\n              // Excel serial date: days since January 1, 1900\r\n              // JavaScript Date: milliseconds since January 1, 1970\r\n              // Excel epoch: January 1, 1900 (but Excel incorrectly treats 1900 as leap year)\r\n              const excelEpoch = new Date(1900, 0, 1); // January 1, 1900\r\n              const msPerDay = 24 * 60 * 60 * 1000;\r\n              // Subtract 2 days to account for Excel's leap year bug and 0-indexing\r\n              const jsDate = new Date(excelEpoch.getTime() + (rawDate - 2) * msPerDay);\r\n              dateJoining = jsDate.toISOString().split('T')[0]; // Format: YYYY-MM-DD\r\n            } \r\n            // If it's already a string, try to parse it\r\n            else if (typeof rawDate === 'string') {\r\n              const parsedDate = new Date(rawDate);\r\n              if (!isNaN(parsedDate.getTime())) {\r\n                dateJoining = parsedDate.toISOString().split('T')[0];\r\n              } else {\r\n                dateJoining = String(rawDate).split(' ')[0];\r\n              }\r\n            }\r\n            // If it's a Date object\r\n            else if (rawDate instanceof Date) {\r\n              dateJoining = rawDate.toISOString().split('T')[0];\r\n            }\r\n            // Fallback\r\n            else {\r\n              dateJoining = String(rawDate);\r\n            }\r\n          } catch (error) {\r\n            console.warn('Error parsing date for employee:', row['EMP NAME'], 'Raw date:', row['DATE OF JOINING']);\r\n            dateJoining = String(row['DATE OF JOINING']);\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: String(row['EMP ID']),\r\n          name: String(row['EMP NAME'] || '').trim(),\r\n          department: String(row['DEPARTMENT'] || '').trim(),\r\n          grade: String(row['GRADE'] || '').trim(),\r\n          reportingManager: row['REPORTING MANAGER'] ? String(row['REPORTING MANAGER']).trim() : '*',\r\n          reportingId: reportingId,\r\n          location: String(row['LOCATION'] || '').trim(),\r\n          mobile: mobile,\r\n          extension: extension,\r\n          email: String(row['EMAIL ID'] || '').trim(),\r\n          dateOfJoining: dateJoining,\r\n          profileImage: '/api/placeholder/150/150'\r\n        };\r\n      });\r\n\r\n      // Extract unique departments and locations\r\n      this.departments = ['All Departments', ...new Set(this.employees.map(emp => emp.department).filter(dept => dept))];\r\n      this.locations = ['All Locations', ...new Set(this.employees.map(emp => emp.location).filter(loc => loc))];\r\n\r\n      console.log(`Loaded ${this.employees.length} employees`);\r\n    } catch (error) {\r\n      console.error('Error loading employee data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Load attendance data from Excel\r\n  async loadAttendanceData() {\r\n    try {\r\n      const response = await fetch('/attendance_data.xlsx');\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n      const sheetName = workbook.SheetNames[0];\r\n      const worksheet = workbook.Sheets[sheetName];\r\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n      this.attendance = jsonData.map((row, index) => {\r\n        // Parse dates and times\r\n        const dateStr = String(row['date']);\r\n        let dateFormatted = '';\r\n        if (dateStr.includes('T')) {\r\n          const dateObj = new Date(dateStr);\r\n          dateFormatted = dateObj.toISOString().split('T')[0];\r\n        } else {\r\n          dateFormatted = dateStr.substring(0, 10);\r\n        }\r\n\r\n        // Parse punch in/out times\r\n        let punchIn = null, punchOut = null;\r\n        if (row['punch_in'] && String(row['punch_in']) !== 'nan') {\r\n          punchIn = new Date(String(row['punch_in'])).toISOString();\r\n        }\r\n        if (row['punch_out'] && String(row['punch_out']) !== 'nan') {\r\n          punchOut = new Date(String(row['punch_out'])).toISOString();\r\n        }\r\n\r\n        return {\r\n          id: `att_${(index + 1).toString().padStart(4, '0')}`,\r\n          employee_id: String(row['employee_id']),\r\n          employee_name: String(row['employee_name']),\r\n          date: dateFormatted,\r\n          punch_in: punchIn,\r\n          punch_out: punchOut,\r\n          punch_in_location: row['punch_in_location'] ? String(row['punch_in_location']) : null,\r\n          punch_out_location: row['punch_out_location'] ? String(row['punch_out_location']) : null,\r\n          status: String(row['status']).toLowerCase(),\r\n          total_hours: row['total_hours'] ? parseFloat(row['total_hours']) : 0.0,\r\n          remarks: row['remarks'] && String(row['remarks']) !== 'nan' ? String(row['remarks']) : null,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        };\r\n      });\r\n\r\n      console.log(`Loaded ${this.attendance.length} attendance records`);\r\n    } catch (error) {\r\n      console.error('Error loading attendance data:', error);\r\n      // If attendance file doesn't exist, create sample data\r\n      this.attendance = this.generateSampleAttendance();\r\n    }\r\n  }\r\n\r\n  // Initialize other data structures with sample data\r\n  initializeOtherData() {\r\n    // Initialize meeting rooms with persistence\r\n    this.meetingRooms = this.generateMeetingRooms();\r\n    \r\n    // Initialize sample data for other modules\r\n    this.news = [];\r\n    this.tasks = [];\r\n    this.knowledge = [];\r\n    this.help = [];\r\n    this.policies = this.generateSamplePolicies();\r\n    this.workflows = [];\r\n    \r\n    // Update locations to include all meeting room locations\r\n    const meetingRoomLocations = [...new Set(this.meetingRooms.map(room => room.location))];\r\n    this.locations = [...new Set([...this.locations, ...meetingRoomLocations])];\r\n  }\r\n\r\n  // Generate sample attendance data if Excel file is not available\r\n  generateSampleAttendance() {\r\n    const sampleEmployees = this.employees.slice(0, 5);\r\n    const attendance = [];\r\n    const statuses = ['present', 'late', 'half_day'];\r\n    const locations = ['IFC Office', 'Remote', 'Client Site'];\r\n\r\n    // Generate last 7 days of data\r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - i);\r\n      \r\n      if (date.getDay() !== 0 && date.getDay() !== 6) { // Skip weekends\r\n        sampleEmployees.forEach((emp, j) => {\r\n          const punchIn = new Date(date);\r\n          punchIn.setHours(9, Math.floor(Math.random() * 30));\r\n          \r\n          const punchOut = new Date(date);\r\n          punchOut.setHours(17, 30 + Math.floor(Math.random() * 30));\r\n\r\n          attendance.push({\r\n            id: `att_${(attendance.length + 1).toString().padStart(4, '0')}`,\r\n            employee_id: emp.id,\r\n            employee_name: emp.name,\r\n            date: date.toISOString().split('T')[0],\r\n            punch_in: punchIn.toISOString(),\r\n            punch_out: punchOut.toISOString(),\r\n            punch_in_location: locations[Math.floor(Math.random() * locations.length)],\r\n            punch_out_location: locations[Math.floor(Math.random() * locations.length)],\r\n            status: statuses[Math.floor(Math.random() * statuses.length)],\r\n            total_hours: Math.round((punchOut - punchIn) / (1000 * 60 * 60) * 100) / 100,\r\n            remarks: null,\r\n            created_at: new Date().toISOString(),\r\n            updated_at: new Date().toISOString()\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    return attendance;\r\n  }\r\n\r\n  // Generate meeting rooms data with persistence\r\n  generateMeetingRooms() {\r\n    // Try to load from localStorage first\r\n    const savedRooms = this.loadMeetingRoomsFromStorage();\r\n    if (savedRooms && savedRooms.length > 0) {\r\n      console.log(`Loaded ${savedRooms.length} meeting rooms from storage`);\r\n      return savedRooms;\r\n    }\r\n    \r\n    // Create initial room structure\r\n    const rooms = [\r\n      // IFC 11th Floor - 1 room\r\n      {\r\n        id: \"ifc-11-001\",\r\n        name: \"IFC Conference Room 11A\",\r\n        location: \"IFC\",\r\n        floor: \"11th Floor\",\r\n        capacity: 10,\r\n        amenities: \"Projector, Whiteboard, Video Conference\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      \r\n      // IFC 12th Floor - 1 room\r\n      {\r\n        id: \"ifc-12-001\", \r\n        name: \"IFC Conference Room 12B\",\r\n        location: \"IFC\",\r\n        floor: \"12th Floor\",\r\n        capacity: 6,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      \r\n      // IFC 14th Floor - Multiple rooms (9 rooms as per test results)\r\n      {\r\n        id: \"ifc-14-001\",\r\n        name: \"OVAL MEETING ROOM\",\r\n        location: \"IFC\", \r\n        floor: \"14th Floor\",\r\n        capacity: 10,\r\n        amenities: \"Projector, Video Conference, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-002\",\r\n        name: \"PETRONAS MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\", \r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-003\",\r\n        name: \"GLOBAL CENTER MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-004\",\r\n        name: \"LOUVRE MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-005\",\r\n        name: \"GOLDEN GATE MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 10,\r\n        amenities: \"Projector, Video Conference, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-006\",\r\n        name: \"EMPIRE STATE MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-007\",\r\n        name: \"MARINA BAY MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-008\",\r\n        name: \"BURJ MEETING ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 5,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"ifc-14-009\",\r\n        name: \"BOARD ROOM\",\r\n        location: \"IFC\",\r\n        floor: \"14th Floor\",\r\n        capacity: 20,\r\n        amenities: \"Projector, Video Conference, Whiteboard, Audio System\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      \r\n      // Other locations - 1 room each on floor 1\r\n      {\r\n        id: \"central-1-001\",\r\n        name: \"Central Office Conference Room\",\r\n        location: \"Central Office 75\",\r\n        floor: \"1st Floor\",\r\n        capacity: 8,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"office75-1-001\",\r\n        name: \"Office 75 Meeting Room\",\r\n        location: \"Office 75\",\r\n        floor: \"1st Floor\",\r\n        capacity: 6,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"noida-1-001\",\r\n        name: \"Noida Conference Room\",\r\n        location: \"Noida\",\r\n        floor: \"1st Floor\",\r\n        capacity: 12,\r\n        amenities: \"Projector, Video Conference, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      },\r\n      {\r\n        id: \"project-1-001\",\r\n        name: \"Project Office Meeting Room\",\r\n        location: \"Project Office\",\r\n        floor: \"1st Floor\",\r\n        capacity: 8,\r\n        amenities: \"Projector, Whiteboard\",\r\n        status: \"vacant\",\r\n        bookings: [],\r\n        current_booking: null\r\n      }\r\n    ];\r\n    \r\n    // Save initial structure to storage\r\n    this.saveMeetingRoomsToStorage(rooms);\r\n    console.log(`Generated and saved ${rooms.length} meeting rooms`);\r\n    return rooms;\r\n  }\r\n\r\n  // Load meeting rooms from localStorage\r\n  loadMeetingRoomsFromStorage() {\r\n    try {\r\n      const saved = localStorage.getItem('meetingRooms_data');\r\n      if (saved) {\r\n        const parsed = JSON.parse(saved);\r\n        // Clean up expired bookings on load\r\n        this.cleanupExpiredBookings(parsed);\r\n        return parsed;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading meeting rooms from storage:', error);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Save meeting rooms to localStorage\r\n  saveMeetingRoomsToStorage(rooms = null) {\r\n    try {\r\n      const roomsToSave = rooms || this.meetingRooms;\r\n      localStorage.setItem('meetingRooms_data', JSON.stringify(roomsToSave));\r\n      localStorage.setItem('meetingRooms_lastSaved', new Date().toISOString());\r\n    } catch (error) {\r\n      console.error('Error saving meeting rooms to storage:', error);\r\n    }\r\n  }\r\n\r\n  // Clean up expired bookings\r\n  cleanupExpiredBookings(rooms) {\r\n    const now = new Date();\r\n    rooms.forEach(room => {\r\n      if (room.current_booking) {\r\n        const endTime = new Date(room.current_booking.end_time);\r\n        if (endTime < now) {\r\n          room.status = 'vacant';\r\n          room.current_booking = null;\r\n          room.bookings = [];\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  // Generate sample policies\r\n  generateSamplePolicies() {\r\n    return [\r\n      {\r\n        id: \"policy_001\",\r\n        title: \"Employee Code of Conduct\",\r\n        category: \"hr\",\r\n        content: \"Guidelines for professional behavior and conduct\",\r\n        effective_date: \"2024-01-01\",\r\n        version: \"1.0\"\r\n      },\r\n      {\r\n        id: \"policy_002\", \r\n        title: \"IT Security Policy\",\r\n        category: \"it\",\r\n        content: \"Information technology security guidelines and procedures\",\r\n        effective_date: \"2024-01-01\",\r\n        version: \"1.0\"\r\n      }\r\n    ];\r\n  }\r\n\r\n  // Employee API methods\r\n  async getEmployees(searchParams = {}) {\r\n    if (!this.isLoaded) await this.loadAllData();\r\n    \r\n    let filtered = [...this.employees];\r\n    \r\n    if (searchParams.search) {\r\n      const search = searchParams.search.toLowerCase();\r\n      filtered = filtered.filter(emp => \r\n        emp.name.toLowerCase().startsWith(search) ||\r\n        emp.id.toLowerCase().startsWith(search) ||\r\n        emp.department.toLowerCase().startsWith(search) ||\r\n        emp.location.toLowerCase().startsWith(search) ||\r\n        emp.grade.toLowerCase().startsWith(search) ||\r\n        emp.mobile.startsWith(search)\r\n      );\r\n    }\r\n    \r\n    if (searchParams.department && searchParams.department !== 'All Departments') {\r\n      filtered = filtered.filter(emp => emp.department === searchParams.department);\r\n    }\r\n    \r\n    if (searchParams.location && searchParams.location !== 'All Locations') {\r\n      filtered = filtered.filter(emp => emp.location === searchParams.location);\r\n    }\r\n    \r\n    return filtered;\r\n  }\r\n\r\n  async updateEmployeeImage(employeeId, imageData) {\r\n    if (!this.isLoaded) await this.loadAllData();\r\n    \r\n    const employee = this.employees.find(emp => emp.id === employeeId);\r\n    if (employee) {\r\n      employee.profileImage = imageData.profileImage || imageData;\r\n      return employee;\r\n    }\r\n    throw new Error('Employee not found');\r\n  }\r\n\r\n  // Utility methods\r\n  async getDepartments() {\r\n    if (!this.isLoaded) await this.loadAllData();\r\n    return this.departments;\r\n  }\r\n\r\n  async getLocations() {\r\n    if (!this.isLoaded) await this.loadAllData();\r\n    return this.locations;\r\n  }\r\n\r\n  async getStats() {\r\n    if (!this.isLoaded) await this.loadAllData();\r\n    \r\n    return {\r\n      database: {\r\n        employees: this.employees.length,\r\n        departments: this.departments.length - 1, // Exclude \"All Departments\"\r\n        locations: this.locations.length - 1, // Exclude \"All Locations\"\r\n        attendance_records: this.attendance.length,\r\n        hierarchy_relations: this.hierarchy.length\r\n      },\r\n      excel: {\r\n        total_employees: this.employees.length,\r\n        departments_count: this.departments.length - 1,\r\n        locations_count: this.locations.length - 1\r\n      }\r\n    };\r\n  }\r\n\r\n  // Hierarchy methods\r\n  async getHierarchy() {\r\n    return this.hierarchy;\r\n  }\r\n\r\n  async createHierarchy(relationshipData) {\r\n    const newRelation = {\r\n      id: `hier_${Date.now()}`,\r\n      ...relationshipData,\r\n      created_at: new Date().toISOString()\r\n    };\r\n    this.hierarchy.push(newRelation);\r\n    return newRelation;\r\n  }\r\n\r\n  async deleteHierarchy(relationId) {\r\n    const index = this.hierarchy.findIndex(h => h.id === relationId);\r\n    if (index > -1) {\r\n      this.hierarchy.splice(index, 1);\r\n      return { message: 'Hierarchy relationship deleted' };\r\n    }\r\n    throw new Error('Hierarchy relationship not found');\r\n  }\r\n\r\n  async clearAllHierarchy() {\r\n    this.hierarchy = [];\r\n    return { message: 'All hierarchy relationships cleared' };\r\n  }\r\n\r\n  // News methods\r\n  async getNews() {\r\n    return this.news;\r\n  }\r\n\r\n  async createNews(newsData) {\r\n    const newNews = {\r\n      id: `news_${Date.now()}`,\r\n      ...newsData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.news.unshift(newNews);\r\n    return newNews;\r\n  }\r\n\r\n  async updateNews(id, newsData) {\r\n    const index = this.news.findIndex(n => n.id === id);\r\n    if (index > -1) {\r\n      this.news[index] = {\r\n        ...this.news[index],\r\n        ...newsData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return this.news[index];\r\n    }\r\n    throw new Error('News not found');\r\n  }\r\n\r\n  async deleteNews(id) {\r\n    const index = this.news.findIndex(n => n.id === id);\r\n    if (index > -1) {\r\n      this.news.splice(index, 1);\r\n      return { message: 'News deleted' };\r\n    }\r\n    throw new Error('News not found');\r\n  }\r\n\r\n  // Task methods\r\n  async getTasks() {\r\n    return this.tasks;\r\n  }\r\n\r\n  async createTask(taskData) {\r\n    const newTask = {\r\n      id: `task_${Date.now()}`,\r\n      ...taskData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.tasks.unshift(newTask);\r\n    return newTask;\r\n  }\r\n\r\n  async updateTask(id, taskData) {\r\n    const index = this.tasks.findIndex(t => t.id === id);\r\n    if (index > -1) {\r\n      this.tasks[index] = {\r\n        ...this.tasks[index],\r\n        ...taskData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return this.tasks[index];\r\n    }\r\n    throw new Error('Task not found');\r\n  }\r\n\r\n  async deleteTask(id) {\r\n    const index = this.tasks.findIndex(t => t.id === id);\r\n    if (index > -1) {\r\n      this.tasks.splice(index, 1);\r\n      return { message: 'Task deleted' };\r\n    }\r\n    throw new Error('Task not found');\r\n  }\r\n\r\n  // Knowledge methods\r\n  async getKnowledge() {\r\n    return this.knowledge;\r\n  }\r\n\r\n  async createKnowledge(knowledgeData) {\r\n    const newKnowledge = {\r\n      id: `knowledge_${Date.now()}`,\r\n      ...knowledgeData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.knowledge.unshift(newKnowledge);\r\n    return newKnowledge;\r\n  }\r\n\r\n  async updateKnowledge(id, knowledgeData) {\r\n    const index = this.knowledge.findIndex(k => k.id === id);\r\n    if (index > -1) {\r\n      this.knowledge[index] = {\r\n        ...this.knowledge[index],\r\n        ...knowledgeData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return this.knowledge[index];\r\n    }\r\n    throw new Error('Knowledge not found');\r\n  }\r\n\r\n  async deleteKnowledge(id) {\r\n    const index = this.knowledge.findIndex(k => k.id === id);\r\n    if (index > -1) {\r\n      this.knowledge.splice(index, 1);\r\n      return { message: 'Knowledge deleted' };\r\n    }\r\n    throw new Error('Knowledge not found');\r\n  }\r\n\r\n  // Help methods\r\n  async getHelp() {\r\n    return this.help;\r\n  }\r\n\r\n  async createHelp(helpData) {\r\n    const newHelp = {\r\n      id: `help_${Date.now()}`,\r\n      ...helpData,\r\n      replies: [],\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.help.unshift(newHelp);\r\n    return newHelp;\r\n  }\r\n\r\n  async updateHelp(id, helpData) {\r\n    const index = this.help.findIndex(h => h.id === id);\r\n    if (index > -1) {\r\n      this.help[index] = {\r\n        ...this.help[index],\r\n        ...helpData,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n      return this.help[index];\r\n    }\r\n    throw new Error('Help request not found');\r\n  }\r\n\r\n  async addHelpReply(id, replyData) {\r\n    const index = this.help.findIndex(h => h.id === id);\r\n    if (index > -1) {\r\n      const reply = {\r\n        id: `reply_${Date.now()}`,\r\n        ...replyData,\r\n        created_at: new Date().toISOString()\r\n      };\r\n      this.help[index].replies.push(reply);\r\n      this.help[index].updated_at = new Date().toISOString();\r\n      return reply;\r\n    }\r\n    throw new Error('Help request not found');\r\n  }\r\n\r\n  async deleteHelp(id) {\r\n    const index = this.help.findIndex(h => h.id === id);\r\n    if (index > -1) {\r\n      this.help.splice(index, 1);\r\n      return { message: 'Help request deleted' };\r\n    }\r\n    throw new Error('Help request not found');\r\n  }\r\n\r\n  // Meeting Rooms methods\r\n  async getMeetingRooms(filters = {}) {\r\n    // Clean up expired bookings first\r\n    this.cleanupExpiredBookings(this.meetingRooms);\r\n    \r\n    let filtered = [...this.meetingRooms];\r\n    \r\n    if (filters.location) {\r\n      filtered = filtered.filter(room => room.location === filters.location);\r\n    }\r\n    \r\n    if (filters.floor) {\r\n      filtered = filtered.filter(room => room.floor === filters.floor);\r\n    }\r\n    \r\n    if (filters.status) {\r\n      filtered = filtered.filter(room => room.status === filters.status);\r\n    }\r\n    \r\n    // Save any changes made by cleanup\r\n    this.saveMeetingRoomsToStorage();\r\n    \r\n    return filtered;\r\n  }\r\n\r\n  async bookMeetingRoom(roomId, bookingData) {\r\n    const room = this.meetingRooms.find(r => r.id === roomId);\r\n    if (!room) {\r\n      throw new Error('Meeting room not found');\r\n    }\r\n\r\n    // Check if room is already booked\r\n    if (room.status === 'occupied') {\r\n      throw new Error('Room is already booked. Multiple bookings are not allowed.');\r\n    }\r\n\r\n    // Validate booking times\r\n    const startTime = new Date(bookingData.start_time);\r\n    const endTime = new Date(bookingData.end_time);\r\n    const now = new Date();\r\n\r\n    if (startTime < now) {\r\n      throw new Error('Cannot book a room for past time');\r\n    }\r\n\r\n    if (endTime <= startTime) {\r\n      throw new Error('End time must be after start time');\r\n    }\r\n\r\n    const booking = {\r\n      id: `booking_${Date.now()}`,\r\n      ...bookingData,\r\n      room_id: roomId,\r\n      room_name: room.name,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    room.bookings = [booking];\r\n    room.current_booking = booking;\r\n    room.status = 'occupied';\r\n\r\n    // Save to localStorage\r\n    this.saveMeetingRoomsToStorage();\r\n\r\n    console.log(`Room ${room.name} booked successfully for ${booking.employee_name}`);\r\n    return booking;\r\n  }\r\n\r\n  async cancelMeetingRoomBooking(roomId, bookingId = null) {\r\n    const room = this.meetingRooms.find(r => r.id === roomId);\r\n    if (!room) {\r\n      throw new Error('Meeting room not found');\r\n    }\r\n\r\n    if (room.status === 'vacant') {\r\n      throw new Error('No booking found to cancel');\r\n    }\r\n\r\n    const roomName = room.name;\r\n    const employeeName = room.current_booking ? room.current_booking.employee_name : 'Unknown';\r\n\r\n    room.bookings = [];\r\n    room.current_booking = null;\r\n    room.status = 'vacant';\r\n\r\n    // Save to localStorage\r\n    this.saveMeetingRoomsToStorage();\r\n\r\n    console.log(`Booking cancelled for ${roomName} (previously booked by ${employeeName})`);\r\n    return { message: 'Booking cancelled successfully', room_name: roomName };\r\n  }\r\n\r\n  async clearAllMeetingRoomBookings() {\r\n    let cancelledCount = 0;\r\n    \r\n    this.meetingRooms.forEach(room => {\r\n      if (room.status === 'occupied') {\r\n        cancelledCount++;\r\n      }\r\n      room.bookings = [];\r\n      room.current_booking = null;\r\n      room.status = 'vacant';\r\n    });\r\n\r\n    // Save to localStorage\r\n    this.saveMeetingRoomsToStorage();\r\n\r\n    console.log(`Cleared all bookings: ${cancelledCount} rooms were occupied, now all ${this.meetingRooms.length} rooms are vacant`);\r\n    return { \r\n      message: 'All bookings cleared successfully',\r\n      rooms_updated: this.meetingRooms.length,\r\n      previously_occupied: cancelledCount\r\n    };\r\n  }\r\n\r\n  // Attendance methods\r\n  async getAttendance(searchParams = {}) {\r\n    let filtered = [...this.attendance];\r\n    \r\n    if (searchParams.search) {\r\n      const search = searchParams.search.toLowerCase();\r\n      filtered = filtered.filter(att => \r\n        att.employee_name.toLowerCase().startsWith(search) ||\r\n        att.employee_id.toLowerCase().startsWith(search)\r\n      );\r\n    }\r\n    \r\n    return filtered;\r\n  }\r\n\r\n  async createAttendance(attendanceData) {\r\n    const newAttendance = {\r\n      id: `att_${Date.now()}`,\r\n      ...attendanceData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.attendance.unshift(newAttendance);\r\n    return newAttendance;\r\n  }\r\n\r\n  // Policies methods\r\n  async getPolicies() {\r\n    return this.policies;\r\n  }\r\n\r\n  async createPolicy(policyData) {\r\n    const newPolicy = {\r\n      id: `policy_${Date.now()}`,\r\n      ...policyData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.policies.unshift(newPolicy);\r\n    return newPolicy;\r\n  }\r\n\r\n  // Workflows methods\r\n  async getWorkflows() {\r\n    return this.workflows;\r\n  }\r\n\r\n  async createWorkflow(workflowData) {\r\n    const newWorkflow = {\r\n      id: `workflow_${Date.now()}`,\r\n      ...workflowData,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    this.workflows.unshift(newWorkflow);\r\n    return newWorkflow;\r\n  }\r\n\r\n  // ===== ALERTS MANAGEMENT =====\r\n  \r\n  // Get all alerts\r\n  getAlerts() {\r\n    return this.alerts;\r\n  }\r\n\r\n  // Get active alerts (for user display)\r\n  getActiveAlerts() {\r\n    const now = new Date();\r\n    return this.alerts.filter(alert => \r\n      alert.isActive && \r\n      (!alert.expiryDate || new Date(alert.expiryDate) > now)\r\n    );\r\n  }\r\n\r\n  // Create a new alert (Admin only)\r\n  createAlert(alertData) {\r\n    const newAlert = {\r\n      id: `alert_${Date.now()}`,\r\n      title: alertData.title || 'Alert',\r\n      message: alertData.message || '',\r\n      type: alertData.type || 'info', // info, warning, success, error\r\n      priority: alertData.priority || 'normal', // high, normal, low\r\n      isActive: alertData.isActive !== undefined ? alertData.isActive : true,\r\n      expiryDate: alertData.expiryDate || null,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n      createdBy: alertData.createdBy || 'admin'\r\n    };\r\n    this.alerts.unshift(newAlert);\r\n    return newAlert;\r\n  }\r\n\r\n  // Update alert (Admin only)\r\n  updateAlert(alertId, alertData) {\r\n    const alertIndex = this.alerts.findIndex(alert => alert.id === alertId);\r\n    if (alertIndex === -1) {\r\n      throw new Error('Alert not found');\r\n    }\r\n\r\n    this.alerts[alertIndex] = {\r\n      ...this.alerts[alertIndex],\r\n      ...alertData,\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    return this.alerts[alertIndex];\r\n  }\r\n\r\n  // Delete alert (Admin only)\r\n  deleteAlert(alertId) {\r\n    const alertIndex = this.alerts.findIndex(alert => alert.id === alertId);\r\n    if (alertIndex === -1) {\r\n      throw new Error('Alert not found');\r\n    }\r\n\r\n    const deletedAlert = this.alerts.splice(alertIndex, 1)[0];\r\n    return deletedAlert;\r\n  }\r\n\r\n  // Toggle alert status (Admin only)\r\n  toggleAlertStatus(alertId) {\r\n    const alert = this.alerts.find(alert => alert.id === alertId);\r\n    if (!alert) {\r\n      throw new Error('Alert not found');\r\n    }\r\n\r\n    alert.isActive = !alert.isActive;\r\n    alert.updated_at = new Date().toISOString();\r\n    return alert;\r\n  }\r\n\r\n  // Initialize demo alerts for testing\r\n  initializeDemoAlerts() {\r\n    // Only add demo alerts if alerts array is empty\r\n    if (this.alerts.length === 0) {\r\n      const demoAlerts = [\r\n        {\r\n          id: 'alert_demo_1',\r\n          title: 'Welcome to SmartWorld!',\r\n          message: 'Welcome to the SmartWorld Employee Management System. We are excited to have you on board!',\r\n          type: 'success',\r\n          priority: 'high',\r\n          isActive: true,\r\n          expiryDate: null,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          createdBy: 'system'\r\n        },\r\n        {\r\n          id: 'alert_demo_2',\r\n          title: 'System Updates',\r\n          message: 'New features have been added to the system. Check out the enhanced employee directory and meeting room booking system.',\r\n          type: 'info',\r\n          priority: 'normal',\r\n          isActive: true,\r\n          expiryDate: null,\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          createdBy: 'system'\r\n        }\r\n      ];\r\n      \r\n      this.alerts = demoAlerts;\r\n      console.log('Demo alerts initialized:', this.alerts.length);\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}